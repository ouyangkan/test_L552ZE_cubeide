
test_L552ZE_cubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e58  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800604c  0800604c  0001604c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800613c  0800613c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800613c  0800613c  0001613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006144  08006144  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006144  08006144  00016144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800614c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000070  080061bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  080061bc  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea4f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db0  00000000  00000000  0003eaf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  000428a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001480  00000000  00000000  00043ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000300bd  00000000  00000000  00045350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f52  00000000  00000000  0007540d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012c2c1  00000000  00000000  0008f35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bb620  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062d4  00000000  00000000  001bb674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000070 	.word	0x20000070
 8000210:	00000000 	.word	0x00000000
 8000214:	08006034 	.word	0x08006034

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000074 	.word	0x20000074
 8000230:	08006034 	.word	0x08006034

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b980 	b.w	800054c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	4688      	mov	r8, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8084 	bne.w	800037c <__udivmoddi4+0x118>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d943      	bls.n	8000302 <__udivmoddi4+0x9e>
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	b142      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 8000280:	f1c2 0020 	rsb	r0, r2, #32
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4094      	lsls	r4, r2
 800028e:	ea40 0801 	orr.w	r8, r0, r1
 8000292:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fbb8 f6fc 	udiv	r6, r8, ip
 80002a0:	fb0c 8116 	mls	r1, ip, r6, r8
 80002a4:	fb06 f00e 	mul.w	r0, r6, lr
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	f106 31ff 	add.w	r1, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4298      	cmp	r0, r3
 80002ba:	f200 8131 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002be:	460e      	mov	r6, r1
 80002c0:	1a19      	subs	r1, r3, r0
 80002c2:	b2a3      	uxth	r3, r4
 80002c4:	fbb1 f0fc 	udiv	r0, r1, ip
 80002c8:	fb0c 1110 	mls	r1, ip, r0, r1
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0x84>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x82>
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	f200 811a 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80002e6:	4618      	mov	r0, r3
 80002e8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ec:	eba4 040e 	sub.w	r4, r4, lr
 80002f0:	2600      	movs	r6, #0
 80002f2:	b11d      	cbz	r5, 80002fc <__udivmoddi4+0x98>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c5 4300 	strd	r4, r3, [r5]
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xa2>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	2a00      	cmp	r2, #0
 800030c:	d152      	bne.n	80003b4 <__udivmoddi4+0x150>
 800030e:	1bcb      	subs	r3, r1, r7
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f f887 	uxth.w	r8, r7
 8000318:	2601      	movs	r6, #1
 800031a:	0c21      	lsrs	r1, r4, #16
 800031c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000320:	fb0e 301c 	mls	r0, lr, ip, r3
 8000324:	fb08 f90c 	mul.w	r9, r8, ip
 8000328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800032c:	4589      	cmp	r9, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0xe4>
 8000330:	1879      	adds	r1, r7, r1
 8000332:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000336:	bf2c      	ite	cs
 8000338:	2001      	movcs	r0, #1
 800033a:	2000      	movcc	r0, #0
 800033c:	4589      	cmp	r9, r1
 800033e:	d902      	bls.n	8000346 <__udivmoddi4+0xe2>
 8000340:	2800      	cmp	r0, #0
 8000342:	f000 80f0 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000346:	469c      	mov	ip, r3
 8000348:	eba1 0109 	sub.w	r1, r1, r9
 800034c:	b2a3      	uxth	r3, r4
 800034e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000352:	fb0e 1110 	mls	r1, lr, r0, r1
 8000356:	fb08 f800 	mul.w	r8, r8, r0
 800035a:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035e:	45a0      	cmp	r8, r4
 8000360:	d907      	bls.n	8000372 <__udivmoddi4+0x10e>
 8000362:	193c      	adds	r4, r7, r4
 8000364:	f100 33ff 	add.w	r3, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x10c>
 800036a:	45a0      	cmp	r8, r4
 800036c:	f200 80d2 	bhi.w	8000514 <__udivmoddi4+0x2b0>
 8000370:	4618      	mov	r0, r3
 8000372:	eba4 0408 	sub.w	r4, r4, r8
 8000376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037a:	e7ba      	b.n	80002f2 <__udivmoddi4+0x8e>
 800037c:	428b      	cmp	r3, r1
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x130>
 8000380:	2d00      	cmp	r5, #0
 8000382:	f000 80be 	beq.w	8000502 <__udivmoddi4+0x29e>
 8000386:	2600      	movs	r6, #0
 8000388:	e9c5 0100 	strd	r0, r1, [r5]
 800038c:	4630      	mov	r0, r6
 800038e:	4631      	mov	r1, r6
 8000390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000394:	fab3 f683 	clz	r6, r3
 8000398:	2e00      	cmp	r6, #0
 800039a:	d14d      	bne.n	8000438 <__udivmoddi4+0x1d4>
 800039c:	428b      	cmp	r3, r1
 800039e:	f0c0 80b3 	bcc.w	8000508 <__udivmoddi4+0x2a4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f240 80b0 	bls.w	8000508 <__udivmoddi4+0x2a4>
 80003a8:	4630      	mov	r0, r6
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a6      	beq.n	80002fc <__udivmoddi4+0x98>
 80003ae:	e9c5 4800 	strd	r4, r8, [r5]
 80003b2:	e7a3      	b.n	80002fc <__udivmoddi4+0x98>
 80003b4:	4097      	lsls	r7, r2
 80003b6:	f1c2 0320 	rsb	r3, r2, #32
 80003ba:	fa01 f002 	lsl.w	r0, r1, r2
 80003be:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c2:	40d9      	lsrs	r1, r3
 80003c4:	fa24 f303 	lsr.w	r3, r4, r3
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	4094      	lsls	r4, r2
 80003ce:	4303      	orrs	r3, r0
 80003d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d4:	0c1e      	lsrs	r6, r3, #16
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 fc08 	mul.w	ip, r0, r8
 80003de:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80003e2:	458c      	cmp	ip, r1
 80003e4:	d90e      	bls.n	8000404 <__udivmoddi4+0x1a0>
 80003e6:	1879      	adds	r1, r7, r1
 80003e8:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ec:	bf2c      	ite	cs
 80003ee:	f04f 0901 	movcs.w	r9, #1
 80003f2:	f04f 0900 	movcc.w	r9, #0
 80003f6:	458c      	cmp	ip, r1
 80003f8:	d903      	bls.n	8000402 <__udivmoddi4+0x19e>
 80003fa:	f1b9 0f00 	cmp.w	r9, #0
 80003fe:	f000 8096 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000402:	4630      	mov	r0, r6
 8000404:	eba1 010c 	sub.w	r1, r1, ip
 8000408:	b29b      	uxth	r3, r3
 800040a:	fbb1 f6fe 	udiv	r6, r1, lr
 800040e:	fb0e 1116 	mls	r1, lr, r6, r1
 8000412:	fb06 fc08 	mul.w	ip, r6, r8
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	458c      	cmp	ip, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x1ca>
 800041e:	1879      	adds	r1, r7, r1
 8000420:	f106 33ff 	add.w	r3, r6, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x1c8>
 8000426:	458c      	cmp	ip, r1
 8000428:	f200 8088 	bhi.w	800053c <__udivmoddi4+0x2d8>
 800042c:	461e      	mov	r6, r3
 800042e:	eba1 030c 	sub.w	r3, r1, ip
 8000432:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000436:	e770      	b.n	800031a <__udivmoddi4+0xb6>
 8000438:	f1c6 0720 	rsb	r7, r6, #32
 800043c:	fa03 f406 	lsl.w	r4, r3, r6
 8000440:	fa02 fc06 	lsl.w	ip, r2, r6
 8000444:	fa01 fe06 	lsl.w	lr, r1, r6
 8000448:	40fa      	lsrs	r2, r7
 800044a:	fa20 f807 	lsr.w	r8, r0, r7
 800044e:	40f9      	lsrs	r1, r7
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	4322      	orrs	r2, r4
 8000456:	ea48 040e 	orr.w	r4, r8, lr
 800045a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800045e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000462:	fa1f f982 	uxth.w	r9, r2
 8000466:	fbb1 faf8 	udiv	sl, r1, r8
 800046a:	fb08 111a 	mls	r1, r8, sl, r1
 800046e:	fb0a f009 	mul.w	r0, sl, r9
 8000472:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000476:	4570      	cmp	r0, lr
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x234>
 800047a:	eb12 0e0e 	adds.w	lr, r2, lr
 800047e:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000482:	bf2c      	ite	cs
 8000484:	f04f 0b01 	movcs.w	fp, #1
 8000488:	f04f 0b00 	movcc.w	fp, #0
 800048c:	4570      	cmp	r0, lr
 800048e:	d902      	bls.n	8000496 <__udivmoddi4+0x232>
 8000490:	f1bb 0f00 	cmp.w	fp, #0
 8000494:	d04e      	beq.n	8000534 <__udivmoddi4+0x2d0>
 8000496:	468a      	mov	sl, r1
 8000498:	ebae 0e00 	sub.w	lr, lr, r0
 800049c:	b2a4      	uxth	r4, r4
 800049e:	fbbe f0f8 	udiv	r0, lr, r8
 80004a2:	fb08 ee10 	mls	lr, r8, r0, lr
 80004a6:	fb00 f909 	mul.w	r9, r0, r9
 80004aa:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x25e>
 80004b2:	eb12 0e0e 	adds.w	lr, r2, lr
 80004b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ba:	d201      	bcs.n	80004c0 <__udivmoddi4+0x25c>
 80004bc:	45f1      	cmp	r9, lr
 80004be:	d840      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004c0:	4608      	mov	r0, r1
 80004c2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80004c6:	ebae 0e09 	sub.w	lr, lr, r9
 80004ca:	fba0 890c 	umull	r8, r9, r0, ip
 80004ce:	45ce      	cmp	lr, r9
 80004d0:	4641      	mov	r1, r8
 80004d2:	464c      	mov	r4, r9
 80004d4:	d302      	bcc.n	80004dc <__udivmoddi4+0x278>
 80004d6:	d106      	bne.n	80004e6 <__udivmoddi4+0x282>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d204      	bcs.n	80004e6 <__udivmoddi4+0x282>
 80004dc:	3801      	subs	r0, #1
 80004de:	ebb8 010c 	subs.w	r1, r8, ip
 80004e2:	eb69 0402 	sbc.w	r4, r9, r2
 80004e6:	b37d      	cbz	r5, 8000548 <__udivmoddi4+0x2e4>
 80004e8:	1a5a      	subs	r2, r3, r1
 80004ea:	eb6e 0e04 	sbc.w	lr, lr, r4
 80004ee:	40f2      	lsrs	r2, r6
 80004f0:	fa0e f707 	lsl.w	r7, lr, r7
 80004f4:	fa2e f306 	lsr.w	r3, lr, r6
 80004f8:	2600      	movs	r6, #0
 80004fa:	4317      	orrs	r7, r2
 80004fc:	e9c5 7300 	strd	r7, r3, [r5]
 8000500:	e6fc      	b.n	80002fc <__udivmoddi4+0x98>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e6f9      	b.n	80002fc <__udivmoddi4+0x98>
 8000508:	1a84      	subs	r4, r0, r2
 800050a:	eb61 0103 	sbc.w	r1, r1, r3
 800050e:	2001      	movs	r0, #1
 8000510:	4688      	mov	r8, r1
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x146>
 8000514:	3802      	subs	r0, #2
 8000516:	443c      	add	r4, r7
 8000518:	e72b      	b.n	8000372 <__udivmoddi4+0x10e>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e6e3      	b.n	80002e8 <__udivmoddi4+0x84>
 8000520:	3e02      	subs	r6, #2
 8000522:	443b      	add	r3, r7
 8000524:	e6cc      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000526:	f1ac 0c02 	sub.w	ip, ip, #2
 800052a:	4439      	add	r1, r7
 800052c:	e70c      	b.n	8000348 <__udivmoddi4+0xe4>
 800052e:	3802      	subs	r0, #2
 8000530:	4439      	add	r1, r7
 8000532:	e767      	b.n	8000404 <__udivmoddi4+0x1a0>
 8000534:	f1aa 0a02 	sub.w	sl, sl, #2
 8000538:	4496      	add	lr, r2
 800053a:	e7ad      	b.n	8000498 <__udivmoddi4+0x234>
 800053c:	3e02      	subs	r6, #2
 800053e:	4439      	add	r1, r7
 8000540:	e775      	b.n	800042e <__udivmoddi4+0x1ca>
 8000542:	3802      	subs	r0, #2
 8000544:	4496      	add	lr, r2
 8000546:	e7bc      	b.n	80004c2 <__udivmoddi4+0x25e>
 8000548:	462e      	mov	r6, r5
 800054a:	e6d7      	b.n	80002fc <__udivmoddi4+0x98>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
 8000570:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000572:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <MX_ADC1_Init+0xe0>)
 8000574:	4a2f      	ldr	r2, [pc, #188]	; (8000634 <MX_ADC1_Init+0xe4>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000578:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <MX_ADC1_Init+0xe0>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057e:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <MX_ADC1_Init+0xe0>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <MX_ADC1_Init+0xe0>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800058a:	4b29      	ldr	r3, [pc, #164]	; (8000630 <MX_ADC1_Init+0xe0>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_ADC1_Init+0xe0>)
 8000592:	2204      	movs	r2, #4
 8000594:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000596:	4b26      	ldr	r3, [pc, #152]	; (8000630 <MX_ADC1_Init+0xe0>)
 8000598:	2200      	movs	r2, #0
 800059a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_ADC1_Init+0xe0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005a2:	4b23      	ldr	r3, [pc, #140]	; (8000630 <MX_ADC1_Init+0xe0>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <MX_ADC1_Init+0xe0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <MX_ADC1_Init+0xe0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_ADC1_Init+0xe0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_ADC1_Init+0xe0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <MX_ADC1_Init+0xe0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d2:	4817      	ldr	r0, [pc, #92]	; (8000630 <MX_ADC1_Init+0xe0>)
 80005d4:	f000 ffd6 	bl	8001584 <HAL_ADC_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005de:	f000 f9ad 	bl	800093c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	4619      	mov	r1, r3
 80005ec:	4810      	ldr	r0, [pc, #64]	; (8000630 <MX_ADC1_Init+0xe0>)
 80005ee:	f001 fd2b 	bl	8002048 <HAL_ADCEx_MultiModeConfigChannel>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005f8:	f000 f9a0 	bl	800093c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_ADC1_Init+0xe8>)
 80005fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000600:	2306      	movs	r3, #6
 8000602:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000608:	237f      	movs	r3, #127	; 0x7f
 800060a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800060c:	2304      	movs	r3, #4
 800060e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_ADC1_Init+0xe0>)
 800061a:	f001 f905 	bl	8001828 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000624:	f000 f98a 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	; 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000098 	.word	0x20000098
 8000634:	42028000 	.word	0x42028000
 8000638:	0c900008 	.word	0x0c900008

0800063c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b0ae      	sub	sp, #184	; 0xb8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	2294      	movs	r2, #148	; 0x94
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f005 f81d 	bl	800569c <memset>
  if(adcHandle->Instance==ADC1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <HAL_ADC_MspInit+0xa8>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d137      	bne.n	80006dc <HAL_ADC_MspInit+0xa0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800066c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000670:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000672:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4618      	mov	r0, r3
 8000680:	f003 f982 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800068a:	f000 f957 	bl	800093c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_ADC_MspInit+0xac>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <HAL_ADC_MspInit+0xac>)
 8000694:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_ADC_MspInit+0xac>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <HAL_ADC_MspInit+0xac>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <HAL_ADC_MspInit+0xac>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <HAL_ADC_MspInit+0xac>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80006be:	2304      	movs	r3, #4
 80006c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c4:	2303      	movs	r3, #3
 80006c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <HAL_ADC_MspInit+0xb0>)
 80006d8:	f001 fe3e 	bl	8002358 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006dc:	bf00      	nop
 80006de:	37b8      	adds	r7, #184	; 0xb8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	42028000 	.word	0x42028000
 80006e8:	40021000 	.word	0x40021000
 80006ec:	42020800 	.word	0x42020800

080006f0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <MX_GPIO_Init+0x114>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a3e      	ldr	r2, [pc, #248]	; (8000804 <MX_GPIO_Init+0x114>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b3c      	ldr	r3, [pc, #240]	; (8000804 <MX_GPIO_Init+0x114>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <MX_GPIO_Init+0x114>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a38      	ldr	r2, [pc, #224]	; (8000804 <MX_GPIO_Init+0x114>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <MX_GPIO_Init+0x114>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <MX_GPIO_Init+0x114>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a32      	ldr	r2, [pc, #200]	; (8000804 <MX_GPIO_Init+0x114>)
 800073c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b30      	ldr	r3, [pc, #192]	; (8000804 <MX_GPIO_Init+0x114>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800074e:	f002 f925 	bl	800299c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_GPIO_Init+0x114>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <MX_GPIO_Init+0x114>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_GPIO_Init+0x114>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	4826      	ldr	r0, [pc, #152]	; (8000808 <MX_GPIO_Init+0x118>)
 8000770:	f001 ff72 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077a:	4824      	ldr	r0, [pc, #144]	; (800080c <MX_GPIO_Init+0x11c>)
 800077c:	f001 ff6c 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	21a0      	movs	r1, #160	; 0xa0
 8000784:	4822      	ldr	r0, [pc, #136]	; (8000810 <MX_GPIO_Init+0x120>)
 8000786:	f001 ff67 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800078a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0x124>)
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	481c      	ldr	r0, [pc, #112]	; (8000810 <MX_GPIO_Init+0x120>)
 80007a0:	f001 fdda 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	4813      	ldr	r0, [pc, #76]	; (8000808 <MX_GPIO_Init+0x118>)
 80007bc:	f001 fdcc 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80007c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0x11c>)
 80007da:	f001 fdbd 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_GPIO_Init+0x120>)
 80007f6:	f001 fdaf 	bl	8002358 <HAL_GPIO_Init>

}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	42020800 	.word	0x42020800
 800080c:	42020000 	.word	0x42020000
 8000810:	42020400 	.word	0x42020400
 8000814:	10110000 	.word	0x10110000

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 fc77 	bl	800110e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f816 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f7ff ff64 	bl	80006f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000828:	f7ff fe92 	bl	8000550 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 800082c:	f000 fb10 	bl	8000e50 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000830:	f000 f88a 	bl	8000948 <MX_RTC_Init>
  MX_UCPD1_Init();
 8000834:	f000 fad6 	bl	8000de4 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000838:	f000 fbb8 	bl	8000fac <MX_USB_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("hello world\n");
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <main+0x34>)
 800083e:	f004 ffa3 	bl	8005788 <puts>
	  HAL_Delay(1000);
 8000842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000846:	f000 fcd9 	bl	80011fc <HAL_Delay>
	  printf("hello world\n");
 800084a:	e7f7      	b.n	800083c <main+0x24>
 800084c:	0800604c 	.word	0x0800604c

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b098      	sub	sp, #96	; 0x60
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	2248      	movs	r2, #72	; 0x48
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f004 ff1c 	bl	800569c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000872:	2000      	movs	r0, #0
 8000874:	f002 f836 	bl	80028e4 <HAL_PWREx_ControlVoltageScaling>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800087e:	f000 f85d 	bl	800093c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000882:	f002 f811 	bl	80028a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <SystemClock_Config+0xc0>)
 8000888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800088c:	4a20      	ldr	r2, [pc, #128]	; (8000910 <SystemClock_Config+0xc0>)
 800088e:	f023 0318 	bic.w	r3, r3, #24
 8000892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000896:	2334      	movs	r3, #52	; 0x34
 8000898:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800089a:	2381      	movs	r3, #129	; 0x81
 800089c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800089e:	2301      	movs	r3, #1
 80008a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008a2:	2301      	movs	r3, #1
 80008a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008aa:	2360      	movs	r3, #96	; 0x60
 80008ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008b2:	2301      	movs	r3, #1
 80008b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80008ba:	2337      	movs	r3, #55	; 0x37
 80008bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008be:	2307      	movs	r3, #7
 80008c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 f898 	bl	8002a04 <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008da:	f000 f82f 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	230f      	movs	r3, #15
 80008e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2303      	movs	r3, #3
 80008e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2105      	movs	r1, #5
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fd66 	bl	80033c8 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000902:	f000 f81b 	bl	800093c <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3760      	adds	r7, #96	; 0x60
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, 1, 0xFFFF);
 8000920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000924:	2201      	movs	r2, #1
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <_write+0x24>)
 800092a:	f003 fec5 	bl	80046b8 <HAL_UART_Transmit>
  return 1;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000128 	.word	0x20000128

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_RTC_Init+0x8c>)
 8000960:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <MX_RTC_Init+0x90>)
 8000962:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_RTC_Init+0x8c>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_RTC_Init+0x8c>)
 800096c:	227f      	movs	r2, #127	; 0x7f
 800096e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_RTC_Init+0x8c>)
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_RTC_Init+0x8c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_RTC_Init+0x8c>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_RTC_Init+0x8c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_RTC_Init+0x8c>)
 800098a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800098e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_RTC_Init+0x8c>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000996:	480f      	ldr	r0, [pc, #60]	; (80009d4 <MX_RTC_Init+0x8c>)
 8000998:	f003 fd0c 	bl	80043b4 <HAL_RTC_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80009a2:	f7ff ffcb 	bl	800093c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_RTC_Init+0x8c>)
 80009bc:	f003 fe00 	bl	80045c0 <HAL_RTCEx_PrivilegeModeSet>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80009c6:	f7ff ffb9 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000100 	.word	0x20000100
 80009d8:	40002800 	.word	0x40002800

080009dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0a8      	sub	sp, #160	; 0xa0
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2294      	movs	r2, #148	; 0x94
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f004 fe55 	bl	800569c <memset>
  if(rtcHandle->Instance==RTC)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <HAL_RTC_MspInit+0x74>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d124      	bne.n	8000a46 <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a00:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 ffba 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a1a:	f7ff ff8f 	bl	800093c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_RTC_MspInit+0x78>)
 8000a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <HAL_RTC_MspInit+0x78>)
 8000a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_RTC_MspInit+0x78>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_RTC_MspInit+0x78>)
 8000a34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a38:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_RTC_MspInit+0x78>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a46:	bf00      	nop
 8000a48:	37a0      	adds	r7, #160	; 0xa0
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40002800 	.word	0x40002800
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6593      	str	r3, [r2, #88]	; 0x58
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x44>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 fb66 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b06:	e000      	b.n	8000b0a <_read+0x16>
 8000b08:	bf00      	nop
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
	}

return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
	return -1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b56:	605a      	str	r2, [r3, #4]
	return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_isatty>:

int _isatty(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f004 fd3e 	bl	8005648 <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20030000 	.word	0x20030000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	2000008c 	.word	0x2000008c
 8000c00:	200004c0 	.word	0x200004c0

08000c04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000c2e:	4b4f      	ldr	r3, [pc, #316]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d107      	bne.n	8000c4a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000c3a:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e005      	b.n	8000c56 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000c4a:	4b48      	ldr	r3, [pc, #288]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	091b      	lsrs	r3, r3, #4
 8000c50:	f003 030f 	and.w	r3, r3, #15
 8000c54:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000c56:	4a46      	ldr	r2, [pc, #280]	; (8000d70 <SystemCoreClockUpdate+0x148>)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c60:	4b42      	ldr	r3, [pc, #264]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f003 030c 	and.w	r3, r3, #12
 8000c68:	2b0c      	cmp	r3, #12
 8000c6a:	d866      	bhi.n	8000d3a <SystemCoreClockUpdate+0x112>
 8000c6c:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <SystemCoreClockUpdate+0x4c>)
 8000c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c72:	bf00      	nop
 8000c74:	08000ca9 	.word	0x08000ca9
 8000c78:	08000d3b 	.word	0x08000d3b
 8000c7c:	08000d3b 	.word	0x08000d3b
 8000c80:	08000d3b 	.word	0x08000d3b
 8000c84:	08000cb1 	.word	0x08000cb1
 8000c88:	08000d3b 	.word	0x08000d3b
 8000c8c:	08000d3b 	.word	0x08000d3b
 8000c90:	08000d3b 	.word	0x08000d3b
 8000c94:	08000cb9 	.word	0x08000cb9
 8000c98:	08000d3b 	.word	0x08000d3b
 8000c9c:	08000d3b 	.word	0x08000d3b
 8000ca0:	08000d3b 	.word	0x08000d3b
 8000ca4:	08000cc1 	.word	0x08000cc1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000ca8:	4a32      	ldr	r2, [pc, #200]	; (8000d74 <SystemCoreClockUpdate+0x14c>)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	6013      	str	r3, [r2, #0]
      break;
 8000cae:	e048      	b.n	8000d42 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000cb0:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <SystemCoreClockUpdate+0x14c>)
 8000cb2:	4a31      	ldr	r2, [pc, #196]	; (8000d78 <SystemCoreClockUpdate+0x150>)
 8000cb4:	601a      	str	r2, [r3, #0]
      break;
 8000cb6:	e044      	b.n	8000d42 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <SystemCoreClockUpdate+0x14c>)
 8000cba:	4a30      	ldr	r2, [pc, #192]	; (8000d7c <SystemCoreClockUpdate+0x154>)
 8000cbc:	601a      	str	r2, [r3, #0]
      break;
 8000cbe:	e040      	b.n	8000d42 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	091b      	lsrs	r3, r3, #4
 8000cd0:	f003 030f 	and.w	r3, r3, #15
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d003      	beq.n	8000ce6 <SystemCoreClockUpdate+0xbe>
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d006      	beq.n	8000cf2 <SystemCoreClockUpdate+0xca>
 8000ce4:	e00b      	b.n	8000cfe <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000ce6:	4a24      	ldr	r2, [pc, #144]	; (8000d78 <SystemCoreClockUpdate+0x150>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	613b      	str	r3, [r7, #16]
          break;
 8000cf0:	e00b      	b.n	8000d0a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000cf2:	4a22      	ldr	r2, [pc, #136]	; (8000d7c <SystemCoreClockUpdate+0x154>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	613b      	str	r3, [r7, #16]
          break;
 8000cfc:	e005      	b.n	8000d0a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	613b      	str	r3, [r7, #16]
          break;
 8000d08:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	0a1b      	lsrs	r3, r3, #8
 8000d10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	fb02 f303 	mul.w	r3, r2, r3
 8000d1a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0e5b      	lsrs	r3, r3, #25
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	3301      	adds	r3, #1
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d34:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <SystemCoreClockUpdate+0x14c>)
 8000d36:	6013      	str	r3, [r2, #0]
      break;
 8000d38:	e003      	b.n	8000d42 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <SystemCoreClockUpdate+0x14c>)
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	6013      	str	r3, [r2, #0]
      break;
 8000d40:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	f003 030f 	and.w	r3, r3, #15
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <SystemCoreClockUpdate+0x158>)
 8000d4e:	5cd3      	ldrb	r3, [r2, r3]
 8000d50:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <SystemCoreClockUpdate+0x14c>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5c:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemCoreClockUpdate+0x14c>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	371c      	adds	r7, #28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	08006070 	.word	0x08006070
 8000d74:	20000000 	.word	0x20000000
 8000d78:	00f42400 	.word	0x00f42400
 8000d7c:	007a1200 	.word	0x007a1200
 8000d80:	08006058 	.word	0x08006058

08000d84 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40021000 	.word	0x40021000

08000db4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000dbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000dca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000

08000de4 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000dfa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000dfe:	f7ff ffd9 	bl	8000db4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e02:	2002      	movs	r0, #2
 8000e04:	f7ff ffbe 	bl	8000d84 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff ffbb 	bl	8000d84 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e12:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e14:	2303      	movs	r3, #3
 8000e16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <MX_UCPD1_Init+0x64>)
 8000e22:	f004 fb68 	bl	80054f6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	463b      	mov	r3, r7
 8000e36:	4619      	mov	r1, r3
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_UCPD1_Init+0x68>)
 8000e3a:	f004 fb5c 	bl	80054f6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	42020400 	.word	0x42020400
 8000e4c:	42020000 	.word	0x42020000

08000e50 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e54:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e56:	4a23      	ldr	r2, [pc, #140]	; (8000ee4 <MX_LPUART1_UART_Init+0x94>)
 8000e58:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e5c:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <MX_LPUART1_UART_Init+0x98>)
 8000e5e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e74:	220c      	movs	r2, #12
 8000e76:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000e98:	f003 fbbe 	bl	8004618 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000ea2:	f7ff fd4b 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000eaa:	f004 f90f 	bl	80050cc <HAL_UARTEx_SetTxFifoThreshold>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000eb4:	f7ff fd42 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000ebc:	f004 f944 	bl	8005148 <HAL_UARTEx_SetRxFifoThreshold>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000ec6:	f7ff fd39 	bl	800093c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_LPUART1_UART_Init+0x90>)
 8000ecc:	f004 f8c5 	bl	800505a <HAL_UARTEx_DisableFifoMode>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000ed6:	f7ff fd31 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000128 	.word	0x20000128
 8000ee4:	40008000 	.word	0x40008000
 8000ee8:	00033324 	.word	0x00033324

08000eec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0ae      	sub	sp, #184	; 0xb8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2294      	movs	r2, #148	; 0x94
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f004 fbc5 	bl	800569c <memset>
  if(uartHandle->Instance==LPUART1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <HAL_UART_MspInit+0xb4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d13d      	bne.n	8000f98 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f1c:	2320      	movs	r3, #32
 8000f1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fd2d 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f34:	f7ff fd02 	bl	800093c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f3c:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000f68:	f001 fd18 	bl	800299c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000f6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f86:	2308      	movs	r3, #8
 8000f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <HAL_UART_MspInit+0xbc>)
 8000f94:	f001 f9e0 	bl	8002358 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000f98:	bf00      	nop
 8000f9a:	37b8      	adds	r7, #184	; 0xb8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40008000 	.word	0x40008000
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	42021800 	.word	0x42021800

08000fac <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MX_USB_PCD_Init+0x48>)
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <MX_USB_PCD_Init+0x4c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_USB_PCD_Init+0x48>)
 8000fb8:	2208      	movs	r2, #8
 8000fba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_USB_PCD_Init+0x48>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USB_PCD_Init+0x48>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_USB_PCD_Init+0x48>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USB_PCD_Init+0x48>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <MX_USB_PCD_Init+0x48>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USB_PCD_Init+0x48>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_USB_PCD_Init+0x48>)
 8000fe2:	f001 fb51 	bl	8002688 <HAL_PCD_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000fec:	f7ff fca6 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200001b8 	.word	0x200001b8
 8000ff8:	4000d400 	.word	0x4000d400

08000ffc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0ae      	sub	sp, #184	; 0xb8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	2294      	movs	r2, #148	; 0x94
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f004 fb3d 	bl	800569c <memset>
  if(pcdHandle->Instance==USB)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <HAL_PCD_MspInit+0xb4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d13d      	bne.n	80010a8 <HAL_PCD_MspInit+0xac>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800102c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001030:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4618      	mov	r0, r3
 800103e:	f002 fca3 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001048:	f7ff fc78 	bl	800093c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001064:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800107e:	230a      	movs	r3, #10
 8001080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001088:	4619      	mov	r1, r3
 800108a:	480b      	ldr	r0, [pc, #44]	; (80010b8 <HAL_PCD_MspInit+0xbc>)
 800108c:	f001 f964 	bl	8002358 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 8001092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 8001096:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800109a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80010a8:	bf00      	nop
 80010aa:	37b8      	adds	r7, #184	; 0xb8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	4000d400 	.word	0x4000d400
 80010b4:	40021000 	.word	0x40021000
 80010b8:	42020000 	.word	0x42020000

080010bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c0:	f7ff fda0 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010c6:	e003      	b.n	80010d0 <LoopCopyDataInit>

080010c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010ce:	3104      	adds	r1, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010d8:	d3f6      	bcc.n	80010c8 <CopyDataInit>
	ldr	r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010dc:	e002      	b.n	80010e4 <LoopFillZerobss>

080010de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010e0:	f842 3b04 	str.w	r3, [r2], #4

080010e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <LoopForever+0x16>)
	cmp	r2, r3
 80010e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010e8:	d3f9      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ea:	f004 fab3 	bl	8005654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ee:	f7ff fb93 	bl	8000818 <main>

080010f2 <LoopForever>:

LoopForever:
    b LoopForever
 80010f2:	e7fe      	b.n	80010f2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80010f4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80010f8:	0800614c 	.word	0x0800614c
	ldr	r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001100:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001104:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001108:	200004c0 	.word	0x200004c0

0800110c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_2_IRQHandler>

0800110e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001118:	2004      	movs	r0, #4
 800111a:	f001 f8eb 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800111e:	f7ff fd83 	bl	8000c28 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001122:	2000      	movs	r0, #0
 8001124:	f000 f80e 	bl	8001144 <HAL_InitTick>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	71fb      	strb	r3, [r7, #7]
 8001132:	e001      	b.n	8001138 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001134:	f7ff fc90 	bl	8000a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001138:	79fb      	ldrb	r3, [r7, #7]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_InitTick+0x6c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d023      	beq.n	80011a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_InitTick+0x70>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_InitTick+0x6c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	fbb3 f3f1 	udiv	r3, r3, r1
 800116a:	fbb2 f3f3 	udiv	r3, r2, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f001 f8e5 	bl	800233e <HAL_SYSTICK_Config>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10f      	bne.n	800119a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b07      	cmp	r3, #7
 800117e:	d809      	bhi.n	8001194 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f001 f8bf 	bl	800230a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_InitTick+0x74>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e007      	b.n	80011a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e004      	b.n	80011a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	e001      	b.n	80011a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x20>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_IncTick+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008
 80011e0:	200004ac 	.word	0x200004ac

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200004ac 	.word	0x200004ac

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff ffee 	bl	80011e4 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d005      	beq.n	8001222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_Delay+0x44>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001222:	bf00      	nop
 8001224:	f7ff ffde 	bl	80011e4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	429a      	cmp	r2, r3
 8001232:	d8f7      	bhi.n	8001224 <HAL_Delay+0x28>
  {
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008

08001244 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	609a      	str	r2, [r3, #8]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	609a      	str	r2, [r3, #8]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3360      	adds	r3, #96	; 0x60
 80012be:	461a      	mov	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <LL_ADC_SetOffset+0x44>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	4313      	orrs	r3, r2
 80012dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	03fff000 	.word	0x03fff000

080012f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3360      	adds	r3, #96	; 0x60
 8001302:	461a      	mov	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3360      	adds	r3, #96	; 0x60
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	615a      	str	r2, [r3, #20]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3330      	adds	r3, #48	; 0x30
 800138c:	461a      	mov	r2, r3
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	4413      	add	r3, r2
 800139a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	211f      	movs	r1, #31
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	401a      	ands	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	0e9b      	lsrs	r3, r3, #26
 80013b4:	f003 011f 	and.w	r1, r3, #31
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	431a      	orrs	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013c8:	bf00      	nop
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3314      	adds	r3, #20
 80013e4:	461a      	mov	r2, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	0e5b      	lsrs	r3, r3, #25
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	4413      	add	r3, r2
 80013f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	0d1b      	lsrs	r3, r3, #20
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	2107      	movs	r1, #7
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	401a      	ands	r2, r3
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	0d1b      	lsrs	r3, r3, #20
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	431a      	orrs	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800141e:	bf00      	nop
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001444:	43db      	mvns	r3, r3
 8001446:	401a      	ands	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0318 	and.w	r3, r3, #24
 800144e:	4908      	ldr	r1, [pc, #32]	; (8001470 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001450:	40d9      	lsrs	r1, r3
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	400b      	ands	r3, r1
 8001456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800145a:	431a      	orrs	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	0007ffff 	.word	0x0007ffff

08001474 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6093      	str	r3, [r2, #8]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014ac:	d101      	bne.n	80014b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014fc:	d101      	bne.n	8001502 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <LL_ADC_IsEnabled+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_ADC_IsEnabled+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b04      	cmp	r3, #4
 8001548:	d101      	bne.n	800154e <LL_ADC_REG_IsConversionOngoing+0x18>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b08      	cmp	r3, #8
 800156e:	d101      	bne.n	8001574 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e134      	b.n	8001808 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d109      	bne.n	80015c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff f845 	bl	800063c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff67 	bl	8001498 <LL_ADC_IsDeepPowerDownEnabled>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff4d 	bl	8001474 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff82 	bl	80014e8 <LL_ADC_IsInternalRegulatorEnabled>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d115      	bne.n	8001616 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff66 	bl	80014c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015f4:	4b86      	ldr	r3, [pc, #536]	; (8001810 <HAL_ADC_Init+0x28c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	4a86      	ldr	r2, [pc, #536]	; (8001814 <HAL_ADC_Init+0x290>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	099b      	lsrs	r3, r3, #6
 8001602:	3301      	adds	r3, #1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001608:	e002      	b.n	8001610 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3b01      	subs	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f9      	bne.n	800160a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff64 	bl	80014e8 <LL_ADC_IsInternalRegulatorEnabled>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10d      	bne.n	8001642 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	f043 0210 	orr.w	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff75 	bl	8001536 <LL_ADC_REG_IsConversionOngoing>
 800164c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 80cd 	bne.w	80017f6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80c9 	bne.w	80017f6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001668:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800166c:	f043 0202 	orr.w	r2, r3, #2
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff49 	bl	8001510 <LL_ADC_IsEnabled>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d110      	bne.n	80016a6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001684:	4864      	ldr	r0, [pc, #400]	; (8001818 <HAL_ADC_Init+0x294>)
 8001686:	f7ff ff43 	bl	8001510 <LL_ADC_IsEnabled>
 800168a:	4604      	mov	r4, r0
 800168c:	4863      	ldr	r0, [pc, #396]	; (800181c <HAL_ADC_Init+0x298>)
 800168e:	f7ff ff3f 	bl	8001510 <LL_ADC_IsEnabled>
 8001692:	4603      	mov	r3, r0
 8001694:	4323      	orrs	r3, r4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4619      	mov	r1, r3
 80016a0:	485f      	ldr	r0, [pc, #380]	; (8001820 <HAL_ADC_Init+0x29c>)
 80016a2:	f7ff fdcf 	bl	8001244 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7e5b      	ldrb	r3, [r3, #25]
 80016aa:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b0:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016b6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016bc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c4:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d106      	bne.n	80016e2 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	3b01      	subs	r3, #1
 80016da:	045b      	lsls	r3, r3, #17
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_ADC_Init+0x2a0>)
 8001706:	4013      	ands	r3, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	69b9      	ldr	r1, [r7, #24]
 800170e:	430b      	orrs	r3, r1
 8001710:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff0d 	bl	8001536 <LL_ADC_REG_IsConversionOngoing>
 800171c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff1a 	bl	800155c <LL_ADC_INJ_IsConversionOngoing>
 8001728:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d140      	bne.n	80017b2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d13d      	bne.n	80017b2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7e1b      	ldrb	r3, [r3, #24]
 800173e:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001740:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001748:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001758:	f023 0306 	bic.w	r3, r3, #6
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	69b9      	ldr	r1, [r7, #24]
 8001762:	430b      	orrs	r3, r1
 8001764:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800176c:	2b01      	cmp	r3, #1
 800176e:	d118      	bne.n	80017a2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800177a:	f023 0304 	bic.w	r3, r3, #4
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001786:	4311      	orrs	r1, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800178c:	4311      	orrs	r1, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001792:	430a      	orrs	r2, r1
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	e007      	b.n	80017b2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d10c      	bne.n	80017d4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	f023 010f 	bic.w	r1, r3, #15
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	631a      	str	r2, [r3, #48]	; 0x30
 80017d2:	e007      	b.n	80017e4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 020f 	bic.w	r2, r2, #15
 80017e2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	f023 0303 	bic.w	r3, r3, #3
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	659a      	str	r2, [r3, #88]	; 0x58
 80017f4:	e007      	b.n	8001806 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	f043 0210 	orr.w	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001806:	7ffb      	ldrb	r3, [r7, #31]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3724      	adds	r7, #36	; 0x24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd90      	pop	{r4, r7, pc}
 8001810:	20000000 	.word	0x20000000
 8001814:	053e2d63 	.word	0x053e2d63
 8001818:	42028000 	.word	0x42028000
 800181c:	42028100 	.word	0x42028100
 8001820:	42028300 	.word	0x42028300
 8001824:	fff0c007 	.word	0xfff0c007

08001828 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b0b7      	sub	sp, #220	; 0xdc
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_ADC_ConfigChannel+0x22>
 8001846:	2302      	movs	r3, #2
 8001848:	e3c1      	b.n	8001fce <HAL_ADC_ConfigChannel+0x7a6>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fe6d 	bl	8001536 <LL_ADC_REG_IsConversionOngoing>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 83a6 	bne.w	8001fb0 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	f7ff fd83 	bl	800137c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fe5b 	bl	8001536 <LL_ADC_REG_IsConversionOngoing>
 8001880:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fe67 	bl	800155c <LL_ADC_INJ_IsConversionOngoing>
 800188e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001892:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 81c1 	bne.w	8001c1e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800189c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 81bc 	bne.w	8001c1e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018ae:	d10f      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2200      	movs	r2, #0
 80018ba:	4619      	mov	r1, r3
 80018bc:	f7ff fd8a 	bl	80013d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fd44 	bl	8001356 <LL_ADC_SetSamplingTimeCommonConfig>
 80018ce:	e00e      	b.n	80018ee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	461a      	mov	r2, r3
 80018de:	f7ff fd79 	bl	80013d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fd34 	bl	8001356 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d00a      	beq.n	8001926 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6919      	ldr	r1, [r3, #16]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001920:	f7ff fcc4 	bl	80012ac <LL_ADC_SetOffset>
 8001924:	e17b      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fce1 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10a      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x12a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fcd6 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	0e9b      	lsrs	r3, r3, #26
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	e01e      	b.n	8001990 <HAL_ADC_ConfigChannel+0x168>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fccb 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001970:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001980:	2320      	movs	r3, #32
 8001982:	e004      	b.n	800198e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001984:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x180>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	e018      	b.n	80019da <HAL_ADC_ConfigChannel+0x1b2>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80019cc:	2320      	movs	r3, #32
 80019ce:	e004      	b.n	80019da <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80019d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019da:	429a      	cmp	r2, r3
 80019dc:	d106      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fc9a 	bl	8001320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fc7e 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10a      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1f0>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2101      	movs	r1, #1
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fc73 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	0e9b      	lsrs	r3, r3, #26
 8001a12:	f003 021f 	and.w	r2, r3, #31
 8001a16:	e01e      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x22e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fc68 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001a46:	2320      	movs	r3, #32
 8001a48:	e004      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x246>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e9b      	lsrs	r3, r3, #26
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	e018      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x278>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001a92:	2320      	movs	r3, #32
 8001a94:	e004      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d106      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fc37 	bl	8001320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fc1b 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x2b6>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2102      	movs	r1, #2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fc10 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	e01e      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x2f4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fc05 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	e004      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x30c>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0e9b      	lsrs	r3, r3, #26
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	e016      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x33a>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001b54:	2320      	movs	r3, #32
 8001b56:	e004      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d106      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fbd6 	bl	8001320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2103      	movs	r1, #3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fbba 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10a      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x378>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2103      	movs	r1, #3
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fbaf 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	0e9b      	lsrs	r3, r3, #26
 8001b9a:	f003 021f 	and.w	r2, r3, #31
 8001b9e:	e017      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x3a8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fba4 	bl	80012f4 <LL_ADC_GetOffsetChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bba:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x3c0>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0e9b      	lsrs	r3, r3, #26
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	e011      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x3e4>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001c00:	2320      	movs	r3, #32
 8001c02:	e003      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d106      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2200      	movs	r2, #0
 8001c16:	2103      	movs	r1, #3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fb81 	bl	8001320 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fc74 	bl	8001510 <LL_ADC_IsEnabled>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f040 81c9 	bne.w	8001fc2 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6819      	ldr	r1, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f7ff fbf5 	bl	800142c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	4a8f      	ldr	r2, [pc, #572]	; (8001e84 <HAL_ADC_ConfigChannel+0x65c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	f040 8131 	bne.w	8001eb0 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10b      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x44e>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0e9b      	lsrs	r3, r3, #26
 8001c64:	3301      	adds	r3, #1
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	2b09      	cmp	r3, #9
 8001c6c:	bf94      	ite	ls
 8001c6e:	2301      	movls	r3, #1
 8001c70:	2300      	movhi	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	e019      	b.n	8001caa <HAL_ADC_ConfigChannel+0x482>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c86:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e003      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	2b09      	cmp	r3, #9
 8001ca2:	bf94      	ite	ls
 8001ca4:	2301      	movls	r3, #1
 8001ca6:	2300      	movhi	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d079      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d107      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x4a2>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0e9b      	lsrs	r3, r3, #26
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	069b      	lsls	r3, r3, #26
 8001cc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc8:	e015      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x4ce>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cda:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	e003      	b.n	8001cee <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	069b      	lsls	r3, r3, #26
 8001cf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x4ee>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	e017      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x51e>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001d2e:	2320      	movs	r3, #32
 8001d30:	e003      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	ea42 0103 	orr.w	r1, r2, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10a      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x544>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0e9b      	lsrs	r3, r3, #26
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	f003 021f 	and.w	r2, r3, #31
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	051b      	lsls	r3, r3, #20
 8001d6a:	e018      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x576>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001d84:	2320      	movs	r3, #32
 8001d86:	e003      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	3301      	adds	r3, #1
 8001d92:	f003 021f 	and.w	r2, r3, #31
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	e081      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d107      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x596>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	3301      	adds	r3, #1
 8001db6:	069b      	lsls	r3, r3, #26
 8001db8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dbc:	e015      	b.n	8001dea <HAL_ADC_ConfigChannel+0x5c2>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e003      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	069b      	lsls	r3, r3, #26
 8001de6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x5e2>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	e017      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x612>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	61fb      	str	r3, [r7, #28]
  return result;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8001e22:	2320      	movs	r3, #32
 8001e24:	e003      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2101      	movs	r1, #1
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	ea42 0103 	orr.w	r1, r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10d      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x63e>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0e9b      	lsrs	r3, r3, #26
 8001e50:	3301      	adds	r3, #1
 8001e52:	f003 021f 	and.w	r2, r3, #31
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b1e      	subs	r3, #30
 8001e5e:	051b      	lsls	r3, r3, #20
 8001e60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e64:	e01e      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x67c>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	613b      	str	r3, [r7, #16]
  return result;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d104      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	e006      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x668>
 8001e82:	bf00      	nop
 8001e84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f003 021f 	and.w	r2, r3, #31
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b1e      	subs	r3, #30
 8001e9e:	051b      	lsls	r3, r3, #20
 8001ea0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	6892      	ldr	r2, [r2, #8]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f7ff fa92 	bl	80013d4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7b0>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8082 	beq.w	8001fc2 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ebe:	4847      	ldr	r0, [pc, #284]	; (8001fdc <HAL_ADC_ConfigChannel+0x7b4>)
 8001ec0:	f7ff f9e6 	bl	8001290 <LL_ADC_GetCommonPathInternalCh>
 8001ec4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ec8:	4845      	ldr	r0, [pc, #276]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7b8>)
 8001eca:	f7ff fb21 	bl	8001510 <LL_ADC_IsEnabled>
 8001ece:	4604      	mov	r4, r0
 8001ed0:	4844      	ldr	r0, [pc, #272]	; (8001fe4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ed2:	f7ff fb1d 	bl	8001510 <LL_ADC_IsEnabled>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4323      	orrs	r3, r4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d15e      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a41      	ldr	r2, [pc, #260]	; (8001fe8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d127      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d121      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a39      	ldr	r2, [pc, #228]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7b8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d161      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001efe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f06:	4619      	mov	r1, r3
 8001f08:	4834      	ldr	r0, [pc, #208]	; (8001fdc <HAL_ADC_ConfigChannel+0x7b4>)
 8001f0a:	f7ff f9ae 	bl	800126a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f0e:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_ADC_ConfigChannel+0x7c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	099b      	lsrs	r3, r3, #6
 8001f14:	4a36      	ldr	r2, [pc, #216]	; (8001ff0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	099b      	lsrs	r3, r3, #6
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001f28:	e002      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f36:	e044      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2d      	ldr	r2, [pc, #180]	; (8001ff4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d113      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x742>
 8001f42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10d      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d134      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f60:	4619      	mov	r1, r3
 8001f62:	481e      	ldr	r0, [pc, #120]	; (8001fdc <HAL_ADC_ConfigChannel+0x7b4>)
 8001f64:	f7ff f981 	bl	800126a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f68:	e02b      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x79a>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a22      	ldr	r2, [pc, #136]	; (8001ff8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d126      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x79a>
 8001f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d120      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d11b      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001f8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f92:	4619      	mov	r1, r3
 8001f94:	4811      	ldr	r0, [pc, #68]	; (8001fdc <HAL_ADC_ConfigChannel+0x7b4>)
 8001f96:	f7ff f968 	bl	800126a <LL_ADC_SetCommonPathInternalCh>
 8001f9a:	e012      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	f043 0220 	orr.w	r2, r3, #32
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001fae:	e008      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	f043 0220 	orr.w	r2, r3, #32
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001fca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	37dc      	adds	r7, #220	; 0xdc
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	80080000 	.word	0x80080000
 8001fdc:	42028300 	.word	0x42028300
 8001fe0:	42028000 	.word	0x42028000
 8001fe4:	42028100 	.word	0x42028100
 8001fe8:	c7520000 	.word	0xc7520000
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	053e2d63 	.word	0x053e2d63
 8001ff4:	cb840000 	.word	0xcb840000
 8001ff8:	80000001 	.word	0x80000001

08001ffc <LL_ADC_IsEnabled>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <LL_ADC_IsEnabled+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_ADC_IsEnabled+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_ADC_REG_IsConversionOngoing>:
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b04      	cmp	r3, #4
 8002034:	d101      	bne.n	800203a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b0a1      	sub	sp, #132	; 0x84
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002062:	2302      	movs	r3, #2
 8002064:	e089      	b.n	800217a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800206e:	2300      	movs	r3, #0
 8002070:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002072:	2300      	movs	r3, #0
 8002074:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a42      	ldr	r2, [pc, #264]	; (8002184 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d102      	bne.n	8002086 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002080:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e001      	b.n	800208a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	f043 0220 	orr.w	r2, r3, #32
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e068      	b.n	800217a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ffb9 	bl	8002022 <LL_ADC_REG_IsConversionOngoing>
 80020b0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ffb3 	bl	8002022 <LL_ADC_REG_IsConversionOngoing>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d14a      	bne.n	8002158 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80020c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d147      	bne.n	8002158 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80020ca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d027      	beq.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80020d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e6:	035b      	lsls	r3, r3, #13
 80020e8:	430b      	orrs	r3, r1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020f0:	4824      	ldr	r0, [pc, #144]	; (8002184 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80020f2:	f7ff ff83 	bl	8001ffc <LL_ADC_IsEnabled>
 80020f6:	4604      	mov	r4, r0
 80020f8:	4823      	ldr	r0, [pc, #140]	; (8002188 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020fa:	f7ff ff7f 	bl	8001ffc <LL_ADC_IsEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	4323      	orrs	r3, r4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d132      	bne.n	800216c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800210e:	f023 030f 	bic.w	r3, r3, #15
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	6811      	ldr	r1, [r2, #0]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	6892      	ldr	r2, [r2, #8]
 800211a:	430a      	orrs	r2, r1
 800211c:	431a      	orrs	r2, r3
 800211e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002120:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002122:	e023      	b.n	800216c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800212e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002130:	4814      	ldr	r0, [pc, #80]	; (8002184 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002132:	f7ff ff63 	bl	8001ffc <LL_ADC_IsEnabled>
 8002136:	4604      	mov	r4, r0
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800213a:	f7ff ff5f 	bl	8001ffc <LL_ADC_IsEnabled>
 800213e:	4603      	mov	r3, r0
 8002140:	4323      	orrs	r3, r4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d112      	bne.n	800216c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800214e:	f023 030f 	bic.w	r3, r3, #15
 8002152:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002154:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002156:	e009      	b.n	800216c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800216a:	e000      	b.n	800216e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800216c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002176:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800217a:	4618      	mov	r0, r3
 800217c:	3784      	adds	r7, #132	; 0x84
 800217e:	46bd      	mov	sp, r7
 8002180:	bd90      	pop	{r4, r7, pc}
 8002182:	bf00      	nop
 8002184:	42028000 	.word	0x42028000
 8002188:	42028100 	.word	0x42028100
 800218c:	42028300 	.word	0x42028300

08002190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ac:	4013      	ands	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60d3      	str	r3, [r2, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <__NVIC_GetPriorityGrouping+0x18>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	f003 0307 	and.w	r3, r3, #7
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0152      	lsls	r2, r2, #5
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0152      	lsls	r2, r2, #5
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b03      	cmp	r3, #3
 8002264:	bf28      	it	cs
 8002266:	2303      	movcs	r3, #3
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3303      	adds	r3, #3
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b04      	subs	r3, #4
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00f      	b.n	80022e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SysTick_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ce:	2107      	movs	r1, #7
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f7ff ff8e 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x40>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff47 	bl	8002190 <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002318:	f7ff ff5e 	bl	80021d8 <__NVIC_GetPriorityGrouping>
 800231c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff ff90 	bl	8002248 <NVIC_EncodePriority>
 8002328:	4602      	mov	r2, r0
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff5f 	bl	80021f4 <__NVIC_SetPriority>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ffb2 	bl	80022b0 <SysTick_Config>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002366:	e158      	b.n	800261a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2101      	movs	r1, #1
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	4013      	ands	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 814a 	beq.w	8002614 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d00b      	beq.n	80023a0 <HAL_GPIO_Init+0x48>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d007      	beq.n	80023a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002394:	2b11      	cmp	r3, #17
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b12      	cmp	r3, #18
 800239e:	d130      	bne.n	8002402 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023d6:	2201      	movs	r2, #1
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 0201 	and.w	r2, r3, #1
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0xea>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b12      	cmp	r3, #18
 8002440:	d123      	bne.n	800248a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	08da      	lsrs	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3208      	adds	r2, #8
 800244a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800244e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	220f      	movs	r2, #15
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	08da      	lsrs	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3208      	adds	r2, #8
 8002484:	6939      	ldr	r1, [r7, #16]
 8002486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0203 	and.w	r2, r3, #3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80a4 	beq.w	8002614 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80024cc:	4a5a      	ldr	r2, [pc, #360]	; (8002638 <HAL_GPIO_Init+0x2e0>)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	3318      	adds	r3, #24
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	220f      	movs	r2, #15
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_GPIO_Init+0x2e4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d025      	beq.n	8002544 <HAL_GPIO_Init+0x1ec>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a51      	ldr	r2, [pc, #324]	; (8002640 <HAL_GPIO_Init+0x2e8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d01f      	beq.n	8002540 <HAL_GPIO_Init+0x1e8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a50      	ldr	r2, [pc, #320]	; (8002644 <HAL_GPIO_Init+0x2ec>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d019      	beq.n	800253c <HAL_GPIO_Init+0x1e4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a4f      	ldr	r2, [pc, #316]	; (8002648 <HAL_GPIO_Init+0x2f0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d013      	beq.n	8002538 <HAL_GPIO_Init+0x1e0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a4e      	ldr	r2, [pc, #312]	; (800264c <HAL_GPIO_Init+0x2f4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00d      	beq.n	8002534 <HAL_GPIO_Init+0x1dc>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a4d      	ldr	r2, [pc, #308]	; (8002650 <HAL_GPIO_Init+0x2f8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d007      	beq.n	8002530 <HAL_GPIO_Init+0x1d8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a4c      	ldr	r2, [pc, #304]	; (8002654 <HAL_GPIO_Init+0x2fc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d101      	bne.n	800252c <HAL_GPIO_Init+0x1d4>
 8002528:	2306      	movs	r3, #6
 800252a:	e00c      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 800252c:	2307      	movs	r3, #7
 800252e:	e00a      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 8002530:	2305      	movs	r3, #5
 8002532:	e008      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 8002534:	2304      	movs	r3, #4
 8002536:	e006      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 8002538:	2303      	movs	r3, #3
 800253a:	e004      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 800253c:	2302      	movs	r3, #2
 800253e:	e002      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 8002544:	2300      	movs	r3, #0
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	f002 0203 	and.w	r2, r2, #3
 800254c:	00d2      	lsls	r2, r2, #3
 800254e:	4093      	lsls	r3, r2
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002556:	4938      	ldr	r1, [pc, #224]	; (8002638 <HAL_GPIO_Init+0x2e0>)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	3318      	adds	r3, #24
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_GPIO_Init+0x2e0>)
 8002566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800258a:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <HAL_GPIO_Init+0x2e0>)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002592:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_GPIO_Init+0x2e0>)
 8002594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025b8:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <HAL_GPIO_Init+0x2e0>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <HAL_GPIO_Init+0x2e0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <HAL_GPIO_Init+0x2e0>)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_GPIO_Init+0x2e0>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_GPIO_Init+0x2e0>)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3301      	adds	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	f47f ae9f 	bne.w	8002368 <HAL_GPIO_Init+0x10>
  }
}
 800262a:	bf00      	nop
 800262c:	bf00      	nop
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	4002f400 	.word	0x4002f400
 800263c:	42020000 	.word	0x42020000
 8002640:	42020400 	.word	0x42020400
 8002644:	42020800 	.word	0x42020800
 8002648:	42020c00 	.word	0x42020c00
 800264c:	42021000 	.word	0x42021000
 8002650:	42021400 	.word	0x42021400
 8002654:	42021800 	.word	0x42021800

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002674:	e002      	b.n	800267c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268a:	b08b      	sub	sp, #44	; 0x2c
 800268c:	af06      	add	r7, sp, #24
 800268e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e0d7      	b.n	800284a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fca4 	bl	8000ffc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2203      	movs	r2, #3
 80026b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f002 ff85 	bl	80055d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e04c      	b.n	8002766 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	3301      	adds	r3, #1
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	440b      	add	r3, r1
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	b298      	uxth	r0, r3
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	3336      	adds	r3, #54	; 0x36
 800270a:	4602      	mov	r2, r0
 800270c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	3303      	adds	r3, #3
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	3338      	adds	r3, #56	; 0x38
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	333c      	adds	r3, #60	; 0x3c
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	3340      	adds	r3, #64	; 0x40
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	3301      	adds	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d3ad      	bcc.n	80026cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e044      	b.n	8002800 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	440b      	add	r3, r1
 800279a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	3301      	adds	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	429a      	cmp	r2, r3
 8002808:	d3b5      	bcc.n	8002776 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	687e      	ldr	r6, [r7, #4]
 8002812:	466d      	mov	r5, sp
 8002814:	f106 0410 	add.w	r4, r6, #16
 8002818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	602b      	str	r3, [r5, #0]
 8002820:	1d33      	adds	r3, r6, #4
 8002822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002824:	6838      	ldr	r0, [r7, #0]
 8002826:	f002 feee 	bl	8005606 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d102      	bne.n	8002848 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f805 	bl	8002852 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002852 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002876:	b29b      	uxth	r3, r3
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800288a:	b29b      	uxth	r3, r3
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40007000 	.word	0x40007000

080028c8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40007000 	.word	0x40007000

080028e4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028f4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80028f6:	f000 f861 	bl	80029bc <HAL_PWREx_SMPS_GetEffectiveMode>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002900:	d101      	bne.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e03e      	b.n	8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002906:	4b21      	ldr	r3, [pc, #132]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800290e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002912:	d101      	bne.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e035      	b.n	8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	d101      	bne.n	8002924 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e02f      	b.n	8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800292c:	4917      	ldr	r1, [pc, #92]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	4a16      	ldr	r2, [pc, #88]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	09db      	lsrs	r3, r3, #7
 8002942:	2232      	movs	r2, #50	; 0x32
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	4a13      	ldr	r2, [pc, #76]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	3301      	adds	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002954:	e002      	b.n	800295c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3b01      	subs	r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002968:	d102      	bne.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f2      	bne.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297c:	d101      	bne.n	8002982 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e000      	b.n	8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40007000 	.word	0x40007000
 8002990:	20000000 	.word	0x20000000
 8002994:	0a7c5ac5 	.word	0x0a7c5ac5
 8002998:	cccccccd 	.word	0xcccccccd

0800299c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80029a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029aa:	6053      	str	r3, [r2, #4]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40007000 	.word	0x40007000

080029bc <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80029d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	e00a      	b.n	80029f0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d103      	bne.n	80029ec <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80029e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	e001      	b.n	80029f0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80029ec:	2300      	movs	r3, #0
 80029ee:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80029f0:	687b      	ldr	r3, [r7, #4]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40007000 	.word	0x40007000

08002a04 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f000 bcd0 	b.w	80033b8 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a18:	4ba3      	ldr	r3, [pc, #652]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a22:	4ba1      	ldr	r3, [pc, #644]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80e9 	beq.w	8002c0c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4a>
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	f040 8083 	bne.w	8002b4e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d17f      	bne.n	8002b4e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a4e:	4b96      	ldr	r3, [pc, #600]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <HAL_RCC_OscConfig+0x64>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f000 bca8 	b.w	80033b8 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6c:	4b8e      	ldr	r3, [pc, #568]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d004      	beq.n	8002a82 <HAL_RCC_OscConfig+0x7e>
 8002a78:	4b8b      	ldr	r3, [pc, #556]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a80:	e005      	b.n	8002a8e <HAL_RCC_OscConfig+0x8a>
 8002a82:	4b89      	ldr	r3, [pc, #548]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d224      	bcs.n	8002adc <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fe98 	bl	80037cc <RCC_SetFlashLatencyFromMSIRange>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f000 bc88 	b.w	80033b8 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa8:	4b7f      	ldr	r3, [pc, #508]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a7e      	ldr	r2, [pc, #504]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002aae:	f043 0308 	orr.w	r3, r3, #8
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b7c      	ldr	r3, [pc, #496]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	4979      	ldr	r1, [pc, #484]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac6:	4b78      	ldr	r3, [pc, #480]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	4974      	ldr	r1, [pc, #464]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
 8002ada:	e026      	b.n	8002b2a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002adc:	4b72      	ldr	r3, [pc, #456]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a71      	ldr	r2, [pc, #452]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002ae2:	f043 0308 	orr.w	r3, r3, #8
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	496c      	ldr	r1, [pc, #432]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002afa:	4b6b      	ldr	r3, [pc, #428]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	4967      	ldr	r1, [pc, #412]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fe57 	bl	80037cc <RCC_SetFlashLatencyFromMSIRange>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f000 bc47 	b.w	80033b8 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b2a:	f000 fe13 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4a5e      	ldr	r2, [pc, #376]	; (8002cac <HAL_RCC_OscConfig+0x2a8>)
 8002b32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b34:	4b5e      	ldr	r3, [pc, #376]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fb03 	bl	8001144 <HAL_InitTick>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d060      	beq.n	8002c0a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	f000 bc35 	b.w	80033b8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d039      	beq.n	8002bca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b56:	4b54      	ldr	r3, [pc, #336]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a53      	ldr	r2, [pc, #332]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b62:	f7fe fb3f 	bl	80011e4 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b68:	e00f      	b.n	8002b8a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b6a:	f7fe fb3b 	bl	80011e4 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d908      	bls.n	8002b8a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b78:	4b4b      	ldr	r3, [pc, #300]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	f000 bc17 	b.w	80033b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0e9      	beq.n	8002b6a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b96:	4b44      	ldr	r3, [pc, #272]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a43      	ldr	r2, [pc, #268]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002b9c:	f043 0308 	orr.w	r3, r3, #8
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	493e      	ldr	r1, [pc, #248]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb4:	4b3c      	ldr	r3, [pc, #240]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	4939      	ldr	r1, [pc, #228]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
 8002bc8:	e020      	b.n	8002c0c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bca:	4b37      	ldr	r3, [pc, #220]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a36      	ldr	r2, [pc, #216]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fb05 	bl	80011e4 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bdc:	e00e      	b.n	8002bfc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bde:	f7fe fb01 	bl	80011e4 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d907      	bls.n	8002bfc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bec:	4b2e      	ldr	r3, [pc, #184]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e3dd      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ea      	bne.n	8002bde <HAL_RCC_OscConfig+0x1da>
 8002c08:	e000      	b.n	8002c0c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d07e      	beq.n	8002d16 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x226>
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d10e      	bne.n	8002c42 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d10b      	bne.n	8002c42 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d06e      	beq.n	8002d14 <HAL_RCC_OscConfig+0x310>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d16a      	bne.n	8002d14 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e3ba      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x256>
 8002c4c:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e01d      	b.n	8002c96 <HAL_RCC_OscConfig+0x292>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x27a>
 8002c64:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002c6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	e00b      	b.n	8002c96 <HAL_RCC_OscConfig+0x292>
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a06      	ldr	r2, [pc, #24]	; (8002ca8 <HAL_RCC_OscConfig+0x2a4>)
 8002c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c94:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d020      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7fe faa1 	bl	80011e4 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca4:	e015      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2ce>
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fa96 	bl	80011e4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d907      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc2:	4b9f      	ldr	r3, [pc, #636]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e372      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd2:	4b9b      	ldr	r3, [pc, #620]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ea      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x2b0>
 8002cde:	e01a      	b.n	8002d16 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fa80 	bl	80011e4 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce6:	e00e      	b.n	8002d06 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe fa7c 	bl	80011e4 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d907      	bls.n	8002d06 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf6:	4b92      	ldr	r3, [pc, #584]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e358      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d06:	4b8e      	ldr	r3, [pc, #568]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ea      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2e4>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d06c      	beq.n	8002dfc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_OscConfig+0x330>
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d119      	bne.n	8002d62 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d116      	bne.n	8002d62 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d34:	4b82      	ldr	r3, [pc, #520]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_OscConfig+0x348>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e335      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b7c      	ldr	r3, [pc, #496]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	4979      	ldr	r1, [pc, #484]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d60:	e04c      	b.n	8002dfc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d029      	beq.n	8002dbe <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d6a:	4b75      	ldr	r3, [pc, #468]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a74      	ldr	r2, [pc, #464]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe fa35 	bl	80011e4 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7c:	e00e      	b.n	8002d9c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7fe fa31 	bl	80011e4 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d907      	bls.n	8002d9c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d8c:	4b6c      	ldr	r3, [pc, #432]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e30d      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ea      	beq.n	8002d7e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da8:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	4962      	ldr	r1, [pc, #392]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
 8002dbc:	e01e      	b.n	8002dfc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbe:	4b60      	ldr	r3, [pc, #384]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5f      	ldr	r2, [pc, #380]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe fa0b 	bl	80011e4 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd0:	e00e      	b.n	8002df0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fa07 	bl	80011e4 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d907      	bls.n	8002df0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de0:	4b57      	ldr	r3, [pc, #348]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e2e3      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df0:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ea      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05f      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d038      	beq.n	8002e82 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d108      	bne.n	8002e2a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002e18:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1e:	4a48      	ldr	r2, [pc, #288]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002e20:	f023 0310 	bic.w	r3, r3, #16
 8002e24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002e28:	e007      	b.n	8002e3a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002e2a:	4b45      	ldr	r3, [pc, #276]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e30:	4a43      	ldr	r2, [pc, #268]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002e32:	f043 0310 	orr.w	r3, r3, #16
 8002e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3a:	4b41      	ldr	r3, [pc, #260]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e40:	4a3f      	ldr	r2, [pc, #252]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe f9cb 	bl	80011e4 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e50:	e00f      	b.n	8002e72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fe f9c7 	bl	80011e4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b07      	cmp	r3, #7
 8002e5e:	d908      	bls.n	8002e72 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e60:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e2a2      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e72:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0e8      	beq.n	8002e52 <HAL_RCC_OscConfig+0x44e>
 8002e80:	e022      	b.n	8002ec8 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e88:	4a2d      	ldr	r2, [pc, #180]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7fe f9a7 	bl	80011e4 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e98:	e00f      	b.n	8002eba <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9a:	f7fe f9a3 	bl	80011e4 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b07      	cmp	r3, #7
 8002ea6:	d908      	bls.n	8002eba <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e27e      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e8      	bne.n	8002e9a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8131 	beq.w	8003138 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10d      	bne.n	8002f02 <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <HAL_RCC_OscConfig+0x53c>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efe:	2301      	movs	r3, #1
 8002f00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_RCC_OscConfig+0x540>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d122      	bne.n	8002f54 <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_RCC_OscConfig+0x540>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <HAL_RCC_OscConfig+0x540>)
 8002f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe f963 	bl	80011e4 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f20:	e012      	b.n	8002f48 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f22:	f7fe f95f 	bl	80011e4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d90b      	bls.n	8002f48 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <HAL_RCC_OscConfig+0x540>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e23b      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f48:	4bb8      	ldr	r3, [pc, #736]	; (800322c <HAL_RCC_OscConfig+0x828>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0e6      	beq.n	8002f22 <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01f      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d010      	beq.n	8002f8e <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f6c:	4bb0      	ldr	r3, [pc, #704]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	4aaf      	ldr	r2, [pc, #700]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002f74:	f043 0304 	orr.w	r3, r3, #4
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f7c:	4bac      	ldr	r3, [pc, #688]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	4aab      	ldr	r2, [pc, #684]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f8c:	e018      	b.n	8002fc0 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f8e:	4ba8      	ldr	r3, [pc, #672]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	4aa6      	ldr	r2, [pc, #664]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f9e:	e00f      	b.n	8002fc0 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fa0:	4ba3      	ldr	r3, [pc, #652]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	4aa2      	ldr	r2, [pc, #648]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fb0:	4b9f      	ldr	r3, [pc, #636]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	4a9e      	ldr	r2, [pc, #632]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
 8002fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d068      	beq.n	800309a <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe f90c 	bl	80011e4 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fce:	e011      	b.n	8002ff4 <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe f908 	bl	80011e4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d908      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe2:	4b93      	ldr	r3, [pc, #588]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e1e1      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff4:	4b8e      	ldr	r3, [pc, #568]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0e6      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d022      	beq.n	8003054 <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800300e:	4b88      	ldr	r3, [pc, #544]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	4a86      	ldr	r2, [pc, #536]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800301a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800301e:	e011      	b.n	8003044 <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fe f8e0 	bl	80011e4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d908      	bls.n	8003044 <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003032:	4b7f      	ldr	r3, [pc, #508]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e1b9      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003044:	4b7a      	ldr	r3, [pc, #488]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0e6      	beq.n	8003020 <HAL_RCC_OscConfig+0x61c>
 8003052:	e068      	b.n	8003126 <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003054:	4b76      	ldr	r3, [pc, #472]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	4a75      	ldr	r2, [pc, #468]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 800305c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003064:	e011      	b.n	800308a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fe f8bd 	bl	80011e4 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d908      	bls.n	800308a <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003078:	4b6d      	ldr	r3, [pc, #436]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e196      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800308a:	4b69      	ldr	r3, [pc, #420]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e6      	bne.n	8003066 <HAL_RCC_OscConfig+0x662>
 8003098:	e045      	b.n	8003126 <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fe f8a3 	bl	80011e4 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a0:	e011      	b.n	80030c6 <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fe f89f 	bl	80011e4 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d908      	bls.n	80030c6 <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b4:	4b5e      	ldr	r3, [pc, #376]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e178      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030c6:	4b5a      	ldr	r3, [pc, #360]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e6      	bne.n	80030a2 <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80030d4:	4b56      	ldr	r3, [pc, #344]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d021      	beq.n	8003126 <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030e2:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e8:	4a51      	ldr	r2, [pc, #324]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 80030ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030f2:	e011      	b.n	8003118 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7fe f876 	bl	80011e4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d908      	bls.n	8003118 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003106:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e14f      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003118:	4b45      	ldr	r3, [pc, #276]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e6      	bne.n	80030f4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003126:	7ffb      	ldrb	r3, [r7, #31]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d105      	bne.n	8003138 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312c:	4b40      	ldr	r3, [pc, #256]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	4a3f      	ldr	r2, [pc, #252]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003136:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d04a      	beq.n	80031da <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	2b00      	cmp	r3, #0
 800314a:	d023      	beq.n	8003194 <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800314c:	4b38      	ldr	r3, [pc, #224]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 800314e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003152:	4a37      	ldr	r2, [pc, #220]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe f842 	bl	80011e4 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003162:	e00f      	b.n	8003184 <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003164:	f7fe f83e 	bl	80011e4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d908      	bls.n	8003184 <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e119      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0e8      	beq.n	8003164 <HAL_RCC_OscConfig+0x760>
 8003192:	e022      	b.n	80031da <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003194:	4b26      	ldr	r3, [pc, #152]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319a:	4a25      	ldr	r2, [pc, #148]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe f81e 	bl	80011e4 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031aa:	e00f      	b.n	80031cc <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ac:	f7fe f81a 	bl	80011e4 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d908      	bls.n	80031cc <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 80031bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0f5      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031cc:	4b18      	ldr	r3, [pc, #96]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 80031ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e8      	bne.n	80031ac <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80e9 	beq.w	80033b6 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e4:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	f000 80a3 	beq.w	8003338 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d16a      	bne.n	80032d0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 8003200:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fd ffed 	bl	80011e4 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800320c:	e012      	b.n	8003234 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320e:	f7fd ffe9 	bl	80011e4 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d90b      	bls.n	8003234 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <HAL_RCC_OscConfig+0x82c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e0c5      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
 800322c:	40007000 	.word	0x40007000
 8003230:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003234:	4b62      	ldr	r3, [pc, #392]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e6      	bne.n	800320e <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003240:	4b5f      	ldr	r3, [pc, #380]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	4b5f      	ldr	r3, [pc, #380]	; (80033c4 <HAL_RCC_OscConfig+0x9c0>)
 8003246:	4013      	ands	r3, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003250:	3a01      	subs	r2, #1
 8003252:	0112      	lsls	r2, r2, #4
 8003254:	4311      	orrs	r1, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800325a:	0212      	lsls	r2, r2, #8
 800325c:	4311      	orrs	r1, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003262:	0852      	lsrs	r2, r2, #1
 8003264:	3a01      	subs	r2, #1
 8003266:	0552      	lsls	r2, r2, #21
 8003268:	4311      	orrs	r1, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800326e:	0852      	lsrs	r2, r2, #1
 8003270:	3a01      	subs	r2, #1
 8003272:	0652      	lsls	r2, r2, #25
 8003274:	4311      	orrs	r1, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800327a:	06d2      	lsls	r2, r2, #27
 800327c:	430a      	orrs	r2, r1
 800327e:	4950      	ldr	r1, [pc, #320]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a4d      	ldr	r2, [pc, #308]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 800328a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003290:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a4a      	ldr	r2, [pc, #296]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 8003296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800329a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fd ffa2 	bl	80011e4 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a2:	e00e      	b.n	80032c2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fd ff9e 	bl	80011e4 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d907      	bls.n	80032c2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b2:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e07a      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c2:	4b3f      	ldr	r3, [pc, #252]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ea      	beq.n	80032a4 <HAL_RCC_OscConfig+0x8a0>
 80032ce:	e072      	b.n	80033b6 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3a      	ldr	r2, [pc, #232]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 80032d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80032dc:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032e8:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a34      	ldr	r2, [pc, #208]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80032f4:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a31      	ldr	r2, [pc, #196]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 80032fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003302:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fd ff6e 	bl	80011e4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330a:	e00e      	b.n	800332a <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fd ff6a 	bl	80011e4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d907      	bls.n	800332a <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e046      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332a:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ea      	bne.n	800330c <HAL_RCC_OscConfig+0x908>
 8003336:	e03e      	b.n	80033b6 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e039      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003344:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <HAL_RCC_OscConfig+0x9bc>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	429a      	cmp	r2, r3
 8003356:	d12c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003362:	3b01      	subs	r3, #1
 8003364:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d123      	bne.n	80033b2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d11b      	bne.n	80033b2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d113      	bne.n	80033b2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	085b      	lsrs	r3, r3, #1
 8003396:	3b01      	subs	r3, #1
 8003398:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d109      	bne.n	80033b2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	3b01      	subs	r3, #1
 80033ac:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	019f800c 	.word	0x019f800c

080033c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e10d      	b.n	80035fc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b88      	ldr	r3, [pc, #544]	; (8003604 <HAL_RCC_ClockConfig+0x23c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d910      	bls.n	8003410 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b85      	ldr	r3, [pc, #532]	; (8003604 <HAL_RCC_ClockConfig+0x23c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 020f 	bic.w	r2, r3, #15
 80033f6:	4983      	ldr	r1, [pc, #524]	; (8003604 <HAL_RCC_ClockConfig+0x23c>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b81      	ldr	r3, [pc, #516]	; (8003604 <HAL_RCC_ClockConfig+0x23c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0f5      	b.n	80035fc <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8094 	beq.w	8003546 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d134      	bne.n	8003490 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003426:	4b78      	ldr	r3, [pc, #480]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0e2      	b.n	80035fc <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003436:	f000 fa2d 	bl	8003894 <RCC_GetSysClockFreqFromPLLSource>
 800343a:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4a73      	ldr	r2, [pc, #460]	; (800360c <HAL_RCC_ClockConfig+0x244>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d956      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003444:	4b70      	ldr	r3, [pc, #448]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003450:	4b6d      	ldr	r3, [pc, #436]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003458:	4a6b      	ldr	r2, [pc, #428]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 800345a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e045      	b.n	80034f2 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d03f      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003476:	2b00      	cmp	r3, #0
 8003478:	d13b      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800347a:	4b63      	ldr	r3, [pc, #396]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003482:	4a61      	ldr	r2, [pc, #388]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 8003484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003488:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e030      	b.n	80034f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003498:	4b5b      	ldr	r3, [pc, #364]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d115      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0a9      	b.n	80035fc <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034b0:	4b55      	ldr	r3, [pc, #340]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e09d      	b.n	80035fc <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c0:	4b51      	ldr	r3, [pc, #324]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e095      	b.n	80035fc <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034d0:	f000 f8a2 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4a4c      	ldr	r2, [pc, #304]	; (800360c <HAL_RCC_ClockConfig+0x244>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d909      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034de:	4b4a      	ldr	r3, [pc, #296]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034e6:	4a48      	ldr	r2, [pc, #288]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 80034e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b45      	ldr	r3, [pc, #276]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4942      	ldr	r1, [pc, #264]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fd fe6e 	bl	80011e4 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e013      	b.n	8003534 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fd fe6a 	bl	80011e4 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d90a      	bls.n	8003534 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 020c 	and.w	r2, r3, #12
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e063      	b.n	80035fc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003534:	4b34      	ldr	r3, [pc, #208]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 020c 	and.w	r2, r3, #12
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	429a      	cmp	r2, r3
 8003544:	d1e2      	bne.n	800350c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003552:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	492a      	ldr	r1, [pc, #168]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]
 8003564:	e008      	b.n	8003578 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d105      	bne.n	8003578 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 8003572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003576:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <HAL_RCC_ClockConfig+0x23c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d210      	bcs.n	80035a8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <HAL_RCC_ClockConfig+0x23c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 020f 	bic.w	r2, r3, #15
 800358e:	491d      	ldr	r1, [pc, #116]	; (8003604 <HAL_RCC_ClockConfig+0x23c>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCC_ClockConfig+0x23c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e029      	b.n	80035fc <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4911      	ldr	r1, [pc, #68]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4909      	ldr	r1, [pc, #36]	; (8003608 <HAL_RCC_ClockConfig+0x240>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80035e6:	f000 f8b5 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4a08      	ldr	r2, [pc, #32]	; (8003610 <HAL_RCC_ClockConfig+0x248>)
 80035ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_RCC_ClockConfig+0x24c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fda5 	bl	8001144 <HAL_InitTick>
 80035fa:	4603      	mov	r3, r0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40022000 	.word	0x40022000
 8003608:	40021000 	.word	0x40021000
 800360c:	04c4b400 	.word	0x04c4b400
 8003610:	20000000 	.word	0x20000000
 8003614:	20000004 	.word	0x20000004

08003618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003630:	4b44      	ldr	r3, [pc, #272]	; (8003744 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x34>
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b0c      	cmp	r3, #12
 8003644:	d121      	bne.n	800368a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d11e      	bne.n	800368a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800364c:	4b3d      	ldr	r3, [pc, #244]	; (8003744 <HAL_RCC_GetSysClockFreq+0x12c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d107      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003658:	4b3a      	ldr	r3, [pc, #232]	; (8003744 <HAL_RCC_GetSysClockFreq+0x12c>)
 800365a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e005      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003668:	4b36      	ldr	r3, [pc, #216]	; (8003744 <HAL_RCC_GetSysClockFreq+0x12c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003674:	4a34      	ldr	r2, [pc, #208]	; (8003748 <HAL_RCC_GetSysClockFreq+0x130>)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10d      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d102      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003690:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_RCC_GetSysClockFreq+0x134>)
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	e004      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800369c:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <HAL_RCC_GetSysClockFreq+0x138>)
 800369e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b0c      	cmp	r3, #12
 80036a4:	d146      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80036a6:	4b27      	ldr	r3, [pc, #156]	; (8003744 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b0:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	3301      	adds	r3, #1
 80036bc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d003      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0xb4>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d00d      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0xce>
 80036ca:	e019      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_RCC_GetSysClockFreq+0x134>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036d6:	68d2      	ldr	r2, [r2, #12]
 80036d8:	0a12      	lsrs	r2, r2, #8
 80036da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	617b      	str	r3, [r7, #20]
        break;
 80036e4:	e019      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e6:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <HAL_RCC_GetSysClockFreq+0x138>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	4a15      	ldr	r2, [pc, #84]	; (8003744 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036f0:	68d2      	ldr	r2, [r2, #12]
 80036f2:	0a12      	lsrs	r2, r2, #8
 80036f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036f8:	fb02 f303 	mul.w	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
        break;
 80036fe:	e00c      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <HAL_RCC_GetSysClockFreq+0x12c>)
 800370a:	68d2      	ldr	r2, [r2, #12]
 800370c:	0a12      	lsrs	r2, r2, #8
 800370e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	617b      	str	r3, [r7, #20]
        break;
 8003718:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_RCC_GetSysClockFreq+0x12c>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	0e5b      	lsrs	r3, r3, #25
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	3301      	adds	r3, #1
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003732:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003734:	69bb      	ldr	r3, [r7, #24]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3724      	adds	r7, #36	; 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	08006070 	.word	0x08006070
 800374c:	00f42400 	.word	0x00f42400
 8003750:	007a1200 	.word	0x007a1200

08003754 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003758:	f7ff ff5e 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetHCLKFreq+0x20>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	4903      	ldr	r1, [pc, #12]	; (8003778 <HAL_RCC_GetHCLKFreq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	08006058 	.word	0x08006058

0800377c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003780:	f7ff ffe8 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4903      	ldr	r1, [pc, #12]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000
 80037a0:	08006068 	.word	0x08006068

080037a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037a8:	f7ff ffd4 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0adb      	lsrs	r3, r3, #11
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4903      	ldr	r1, [pc, #12]	; (80037c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000
 80037c8:	08006068 	.word	0x08006068

080037cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037d8:	4b2c      	ldr	r3, [pc, #176]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037e4:	f7ff f870 	bl	80028c8 <HAL_PWREx_GetVoltageRange>
 80037e8:	6138      	str	r0, [r7, #16]
 80037ea:	e014      	b.n	8003816 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037ec:	4b27      	ldr	r3, [pc, #156]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	4a26      	ldr	r2, [pc, #152]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f6:	6593      	str	r3, [r2, #88]	; 0x58
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003804:	f7ff f860 	bl	80028c8 <HAL_PWREx_GetVoltageRange>
 8003808:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	4a1f      	ldr	r2, [pc, #124]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003814:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003822:	d10b      	bne.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d919      	bls.n	800385e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2ba0      	cmp	r3, #160	; 0xa0
 800382e:	d902      	bls.n	8003836 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003830:	2302      	movs	r3, #2
 8003832:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003834:	e013      	b.n	800385e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003836:	2301      	movs	r3, #1
 8003838:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800383a:	e010      	b.n	800385e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b80      	cmp	r3, #128	; 0x80
 8003840:	d902      	bls.n	8003848 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003842:	2303      	movs	r3, #3
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e00a      	b.n	800385e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d102      	bne.n	8003854 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800384e:	2302      	movs	r3, #2
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	e004      	b.n	800385e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b70      	cmp	r3, #112	; 0x70
 8003858:	d101      	bne.n	800385e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800385a:	2301      	movs	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 020f 	bic.w	r2, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	40022000 	.word	0x40022000

08003894 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800389e:	4b36      	ldr	r3, [pc, #216]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d118      	bne.n	80038dc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038aa:	4b33      	ldr	r3, [pc, #204]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d107      	bne.n	80038c6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038b6:	4b30      	ldr	r3, [pc, #192]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e005      	b.n	80038d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038c6:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80038d2:	4a2a      	ldr	r2, [pc, #168]	; (800397c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038da:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038dc:	4b26      	ldr	r3, [pc, #152]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	3301      	adds	r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d003      	beq.n	8003902 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d00d      	beq.n	800391c <RCC_GetSysClockFreqFromPLLSource+0x88>
 8003900:	e019      	b.n	8003936 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003902:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	4a1b      	ldr	r2, [pc, #108]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	0a12      	lsrs	r2, r2, #8
 8003910:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	613b      	str	r3, [r7, #16]
      break;
 800391a:	e019      	b.n	8003950 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800391c:	4a19      	ldr	r2, [pc, #100]	; (8003984 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	4a14      	ldr	r2, [pc, #80]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003926:	68d2      	ldr	r2, [r2, #12]
 8003928:	0a12      	lsrs	r2, r2, #8
 800392a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	613b      	str	r3, [r7, #16]
      break;
 8003934:	e00c      	b.n	8003950 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003940:	68d2      	ldr	r2, [r2, #12]
 8003942:	0a12      	lsrs	r2, r2, #8
 8003944:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003948:	fb02 f303 	mul.w	r3, r2, r3
 800394c:	613b      	str	r3, [r7, #16]
      break;
 800394e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003950:	4b09      	ldr	r3, [pc, #36]	; (8003978 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	0e5b      	lsrs	r3, r3, #25
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	3301      	adds	r3, #1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800396a:	683b      	ldr	r3, [r7, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	40021000 	.word	0x40021000
 800397c:	08006070 	.word	0x08006070
 8003980:	00f42400 	.word	0x00f42400
 8003984:	007a1200 	.word	0x007a1200

08003988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003990:	2300      	movs	r3, #0
 8003992:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003994:	2300      	movs	r3, #0
 8003996:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d040      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d02a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039ac:	2b80      	cmp	r3, #128	; 0x80
 80039ae:	d825      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80039b0:	2b60      	cmp	r3, #96	; 0x60
 80039b2:	d026      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039b4:	2b60      	cmp	r3, #96	; 0x60
 80039b6:	d821      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d006      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x42>
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d81d      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d010      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x62>
 80039c8:	e018      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039ca:	4b8f      	ldr	r3, [pc, #572]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4a8e      	ldr	r2, [pc, #568]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039d6:	e015      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fb56 	bl	8004090 <RCCEx_PLLSAI1_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039e8:	e00c      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3320      	adds	r3, #32
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fc33 	bl	800425c <RCCEx_PLLSAI2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039fa:	e003      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77fb      	strb	r3, [r7, #31]
        break;
 8003a00:	e000      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a04:	7ffb      	ldrb	r3, [r7, #31]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a10:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a18:	497b      	ldr	r1, [pc, #492]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a20:	e001      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	7ffb      	ldrb	r3, [r7, #31]
 8003a24:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d047      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3a:	d030      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a40:	d82a      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a46:	d02a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a4c:	d824      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a52:	d008      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a58:	d81e      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a62:	d010      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a64:	e018      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a66:	4b68      	ldr	r3, [pc, #416]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	4a67      	ldr	r2, [pc, #412]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a70:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a72:	e015      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fb08 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a84:	e00c      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3320      	adds	r3, #32
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fbe5 	bl	800425c <RCCEx_PLLSAI2_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a96:	e003      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	77fb      	strb	r3, [r7, #31]
        break;
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa0:	7ffb      	ldrb	r3, [r7, #31]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aa6:	4b58      	ldr	r3, [pc, #352]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4954      	ldr	r1, [pc, #336]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003abc:	e001      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
 8003ac0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80ab 	beq.w	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad4:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10d      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae0:	4b49      	ldr	r3, [pc, #292]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	4a48      	ldr	r2, [pc, #288]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aea:	6593      	str	r3, [r2, #88]	; 0x58
 8003aec:	4b46      	ldr	r3, [pc, #280]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003afc:	4b43      	ldr	r3, [pc, #268]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a42      	ldr	r2, [pc, #264]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b08:	f7fd fb6c 	bl	80011e4 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b0e:	e00f      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fd fb68 	bl	80011e4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d908      	bls.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003b2e:	e006      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b30:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0e9      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003b3c:	e000      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003b3e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003b40:	7ffb      	ldrb	r3, [r7, #31]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d164      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b50:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01f      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d019      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b64:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	4a24      	ldr	r2, [pc, #144]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b80:	4b21      	ldr	r3, [pc, #132]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	4a20      	ldr	r2, [pc, #128]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b90:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01f      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fd fb1f 	bl	80011e4 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba8:	e012      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003baa:	f7fd fb1b 	bl	80011e4 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d909      	bls.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003bce:	e007      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd0:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0e5      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003be0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003be2:	7ffb      	ldrb	r3, [r7, #31]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10c      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	4903      	ldr	r1, [pc, #12]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c00:	e008      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c02:	7ffb      	ldrb	r3, [r7, #31]
 8003c04:	77bb      	strb	r3, [r7, #30]
 8003c06:	e005      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7ffb      	ldrb	r3, [r7, #31]
 8003c12:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1a:	4baf      	ldr	r3, [pc, #700]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	4aae      	ldr	r2, [pc, #696]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c32:	4ba9      	ldr	r3, [pc, #676]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	f023 0203 	bic.w	r2, r3, #3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	49a5      	ldr	r1, [pc, #660]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c54:	4ba0      	ldr	r3, [pc, #640]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f023 020c 	bic.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	499d      	ldr	r1, [pc, #628]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c76:	4b98      	ldr	r3, [pc, #608]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	4994      	ldr	r1, [pc, #592]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c98:	4b8f      	ldr	r3, [pc, #572]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	498c      	ldr	r1, [pc, #560]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cba:	4b87      	ldr	r3, [pc, #540]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	4983      	ldr	r1, [pc, #524]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cdc:	4b7e      	ldr	r3, [pc, #504]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	497b      	ldr	r1, [pc, #492]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cfe:	4b76      	ldr	r3, [pc, #472]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	4972      	ldr	r1, [pc, #456]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d20:	4b6d      	ldr	r3, [pc, #436]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2e:	496a      	ldr	r1, [pc, #424]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003d42:	4b65      	ldr	r3, [pc, #404]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d50:	4961      	ldr	r1, [pc, #388]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d031      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d6c:	d00e      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003d6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d72:	d814      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d015      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d7c:	d10f      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7e:	4b56      	ldr	r3, [pc, #344]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4a55      	ldr	r2, [pc, #340]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d88:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003d8a:	e00c      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f97c 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003d9c:	e003      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	77fb      	strb	r3, [r7, #31]
        break;
 8003da2:	e000      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da6:	7ffb      	ldrb	r3, [r7, #31]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dac:	4b4a      	ldr	r3, [pc, #296]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dba:	4947      	ldr	r1, [pc, #284]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dc2:	e001      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc4:	7ffb      	ldrb	r3, [r7, #31]
 8003dc6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dd4:	4b40      	ldr	r3, [pc, #256]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	493d      	ldr	r1, [pc, #244]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003df6:	4b38      	ldr	r3, [pc, #224]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e04:	4934      	ldr	r1, [pc, #208]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e18:	4b2f      	ldr	r3, [pc, #188]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	492c      	ldr	r1, [pc, #176]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e3a:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e40:	f023 0203 	bic.w	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	4923      	ldr	r1, [pc, #140]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d028      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	491b      	ldr	r1, [pc, #108]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7a:	d106      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7c:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e86:	60d3      	str	r3, [r2, #12]
 8003e88:	e011      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e92:	d10c      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f8f8 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003ea4:	7ffb      	ldrb	r3, [r7, #31]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 8003eaa:	7ffb      	ldrb	r3, [r7, #31]
 8003eac:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d04d      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec2:	d10b      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eca:	4a03      	ldr	r2, [pc, #12]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003ed4:	e015      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	4b6b      	ldr	r3, [pc, #428]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eea:	4968      	ldr	r1, [pc, #416]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ef2:	4b66      	ldr	r3, [pc, #408]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef8:	4a64      	ldr	r2, [pc, #400]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003efe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f0a:	d10d      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f8bc 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f1c:	7ffb      	ldrb	r3, [r7, #31]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d019      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003f22:	7ffb      	ldrb	r3, [r7, #31]
 8003f24:	77bb      	strb	r3, [r7, #30]
 8003f26:	e016      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f30:	d106      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f32:	4b56      	ldr	r3, [pc, #344]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	4a55      	ldr	r2, [pc, #340]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3c:	60d3      	str	r3, [r2, #12]
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f48:	d105      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f4a:	4b50      	ldr	r3, [pc, #320]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	4a4f      	ldr	r2, [pc, #316]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d028      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f62:	4b4a      	ldr	r3, [pc, #296]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f70:	4946      	ldr	r1, [pc, #280]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f80:	d106      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f82:	4b42      	ldr	r3, [pc, #264]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4a41      	ldr	r2, [pc, #260]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f8c:	60d3      	str	r3, [r2, #12]
 8003f8e:	e011      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 f875 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003faa:	7ffb      	ldrb	r3, [r7, #31]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8003fb0:	7ffb      	ldrb	r3, [r7, #31]
 8003fb2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01e      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fc0:	4b32      	ldr	r3, [pc, #200]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fd0:	492e      	ldr	r1, [pc, #184]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fe2:	d10c      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f850 	bl	8004090 <RCCEx_PLLSAI1_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003ff4:	7ffb      	ldrb	r3, [r7, #31]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003ffa:	7ffb      	ldrb	r3, [r7, #31]
 8003ffc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800400c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004010:	f023 0204 	bic.w	r2, r3, #4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401a:	491c      	ldr	r1, [pc, #112]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004030:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004034:	f023 0218 	bic.w	r2, r3, #24
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	4913      	ldr	r1, [pc, #76]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d017      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004052:	4b0e      	ldr	r3, [pc, #56]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004054:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004062:	490a      	ldr	r1, [pc, #40]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004074:	d105      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004076:	4b05      	ldr	r3, [pc, #20]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	4a04      	ldr	r2, [pc, #16]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800407c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004080:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004082:	7fbb      	ldrb	r3, [r7, #30]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000

08004090 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d018      	beq.n	80040d8 <RCCEx_PLLSAI1_Config+0x48>
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d81f      	bhi.n	80040ea <RCCEx_PLLSAI1_Config+0x5a>
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d002      	beq.n	80040b4 <RCCEx_PLLSAI1_Config+0x24>
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d009      	beq.n	80040c6 <RCCEx_PLLSAI1_Config+0x36>
 80040b2:	e01a      	b.n	80040ea <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040b4:	4b65      	ldr	r3, [pc, #404]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d117      	bne.n	80040f0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c4:	e014      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040c6:	4b61      	ldr	r3, [pc, #388]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d110      	bne.n	80040f4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d6:	e00d      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80040d8:	4b5c      	ldr	r3, [pc, #368]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e8:	e006      	b.n	80040f8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	73fb      	strb	r3, [r7, #15]
      break;
 80040ee:	e004      	b.n	80040fa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80040f0:	bf00      	nop
 80040f2:	e002      	b.n	80040fa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80040f4:	bf00      	nop
 80040f6:	e000      	b.n	80040fa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80040f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f040 809f 	bne.w	8004240 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004102:	4b52      	ldr	r3, [pc, #328]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a51      	ldr	r2, [pc, #324]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004108:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800410c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410e:	f7fd f869 	bl	80011e4 <HAL_GetTick>
 8004112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004114:	e00f      	b.n	8004136 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004116:	f7fd f865 	bl	80011e4 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d908      	bls.n	8004136 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004124:	4b49      	ldr	r3, [pc, #292]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004134:	e006      	b.n	8004144 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004136:	4b45      	ldr	r3, [pc, #276]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e9      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0x86>
 8004142:	e000      	b.n	8004146 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004144:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d179      	bne.n	8004240 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d116      	bne.n	8004180 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004152:	4b3e      	ldr	r3, [pc, #248]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004158:	4013      	ands	r3, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6892      	ldr	r2, [r2, #8]
 800415e:	0211      	lsls	r1, r2, #8
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68d2      	ldr	r2, [r2, #12]
 8004164:	06d2      	lsls	r2, r2, #27
 8004166:	4311      	orrs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6852      	ldr	r2, [r2, #4]
 800416c:	3a01      	subs	r2, #1
 800416e:	0112      	lsls	r2, r2, #4
 8004170:	4311      	orrs	r1, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	4934      	ldr	r1, [pc, #208]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	610b      	str	r3, [r1, #16]
 800417e:	e033      	b.n	80041e8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d118      	bne.n	80041b8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004186:	4b31      	ldr	r3, [pc, #196]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	4b32      	ldr	r3, [pc, #200]	; (8004254 <RCCEx_PLLSAI1_Config+0x1c4>)
 800418c:	4013      	ands	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6892      	ldr	r2, [r2, #8]
 8004192:	0211      	lsls	r1, r2, #8
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6912      	ldr	r2, [r2, #16]
 8004198:	0852      	lsrs	r2, r2, #1
 800419a:	3a01      	subs	r2, #1
 800419c:	0552      	lsls	r2, r2, #21
 800419e:	4311      	orrs	r1, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6852      	ldr	r2, [r2, #4]
 80041a4:	3a01      	subs	r2, #1
 80041a6:	0112      	lsls	r2, r2, #4
 80041a8:	4311      	orrs	r1, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	4926      	ldr	r1, [pc, #152]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	610b      	str	r3, [r1, #16]
 80041b6:	e017      	b.n	80041e8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041b8:	4b24      	ldr	r3, [pc, #144]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <RCCEx_PLLSAI1_Config+0x1c8>)
 80041be:	4013      	ands	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6892      	ldr	r2, [r2, #8]
 80041c4:	0211      	lsls	r1, r2, #8
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6952      	ldr	r2, [r2, #20]
 80041ca:	0852      	lsrs	r2, r2, #1
 80041cc:	3a01      	subs	r2, #1
 80041ce:	0652      	lsls	r2, r2, #25
 80041d0:	4311      	orrs	r1, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6852      	ldr	r2, [r2, #4]
 80041d6:	3a01      	subs	r2, #1
 80041d8:	0112      	lsls	r2, r2, #4
 80041da:	4311      	orrs	r1, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	491a      	ldr	r1, [pc, #104]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a17      	ldr	r2, [pc, #92]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fc fff6 	bl	80011e4 <HAL_GetTick>
 80041f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041fa:	e00f      	b.n	800421c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041fc:	f7fc fff2 	bl	80011e4 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d908      	bls.n	800421c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800421a:	e006      	b.n	800422a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0e9      	beq.n	80041fc <RCCEx_PLLSAI1_Config+0x16c>
 8004228:	e000      	b.n	800422c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800422a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	4904      	ldr	r1, [pc, #16]	; (800424c <RCCEx_PLLSAI1_Config+0x1bc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000
 8004250:	07ff800c 	.word	0x07ff800c
 8004254:	ff9f800c 	.word	0xff9f800c
 8004258:	f9ff800c 	.word	0xf9ff800c

0800425c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b03      	cmp	r3, #3
 8004270:	d018      	beq.n	80042a4 <RCCEx_PLLSAI2_Config+0x48>
 8004272:	2b03      	cmp	r3, #3
 8004274:	d81f      	bhi.n	80042b6 <RCCEx_PLLSAI2_Config+0x5a>
 8004276:	2b01      	cmp	r3, #1
 8004278:	d002      	beq.n	8004280 <RCCEx_PLLSAI2_Config+0x24>
 800427a:	2b02      	cmp	r3, #2
 800427c:	d009      	beq.n	8004292 <RCCEx_PLLSAI2_Config+0x36>
 800427e:	e01a      	b.n	80042b6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004280:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d117      	bne.n	80042bc <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004290:	e014      	b.n	80042bc <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004292:	4b46      	ldr	r3, [pc, #280]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429a:	2b00      	cmp	r3, #0
 800429c:	d110      	bne.n	80042c0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a2:	e00d      	b.n	80042c0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80042a4:	4b41      	ldr	r3, [pc, #260]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b4:	e006      	b.n	80042c4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
      break;
 80042ba:	e004      	b.n	80042c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80042bc:	bf00      	nop
 80042be:	e002      	b.n	80042c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80042c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d169      	bne.n	80043a0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042cc:	4b37      	ldr	r3, [pc, #220]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a36      	ldr	r2, [pc, #216]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 80042d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d8:	f7fc ff84 	bl	80011e4 <HAL_GetTick>
 80042dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042de:	e00f      	b.n	8004300 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042e0:	f7fc ff80 	bl	80011e4 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d908      	bls.n	8004300 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042ee:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042fe:	e006      	b.n	800430e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e9      	bne.n	80042e0 <RCCEx_PLLSAI2_Config+0x84>
 800430c:	e000      	b.n	8004310 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800430e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d144      	bne.n	80043a0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d115      	bne.n	8004348 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800431c:	4b23      	ldr	r3, [pc, #140]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	4b23      	ldr	r3, [pc, #140]	; (80043b0 <RCCEx_PLLSAI2_Config+0x154>)
 8004322:	4013      	ands	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6892      	ldr	r2, [r2, #8]
 8004328:	0211      	lsls	r1, r2, #8
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	68d2      	ldr	r2, [r2, #12]
 800432e:	06d2      	lsls	r2, r2, #27
 8004330:	4311      	orrs	r1, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6852      	ldr	r2, [r2, #4]
 8004336:	3a01      	subs	r2, #1
 8004338:	0112      	lsls	r2, r2, #4
 800433a:	4311      	orrs	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	491a      	ldr	r1, [pc, #104]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 8004344:	4313      	orrs	r3, r2
 8004346:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004348:	4b18      	ldr	r3, [pc, #96]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a17      	ldr	r2, [pc, #92]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 800434e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004352:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fc ff46 	bl	80011e4 <HAL_GetTick>
 8004358:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800435a:	e00f      	b.n	800437c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800435c:	f7fc ff42 	bl	80011e4 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d908      	bls.n	800437c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800436a:	4b10      	ldr	r3, [pc, #64]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800437a:	e006      	b.n	800438a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0e9      	beq.n	800435c <RCCEx_PLLSAI2_Config+0x100>
 8004388:	e000      	b.n	800438c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800438a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	4904      	ldr	r1, [pc, #16]	; (80043ac <RCCEx_PLLSAI2_Config+0x150>)
 800439c:	4313      	orrs	r3, r2
 800439e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	07ff800c 	.word	0x07ff800c

080043b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d05c      	beq.n	8004480 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fc fafe 	bl	80009dc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043e8:	4b28      	ldr	r3, [pc, #160]	; (800448c <HAL_RTC_Init+0xd8>)
 80043ea:	22ca      	movs	r2, #202	; 0xca
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
 80043ee:	4b27      	ldr	r3, [pc, #156]	; (800448c <HAL_RTC_Init+0xd8>)
 80043f0:	2253      	movs	r2, #83	; 0x53
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f871 	bl	80044dc <RTC_EnterInitMode>
 80043fa:	4603      	mov	r3, r0
 80043fc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d133      	bne.n	800446c <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004404:	4b21      	ldr	r3, [pc, #132]	; (800448c <HAL_RTC_Init+0xd8>)
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	4a20      	ldr	r2, [pc, #128]	; (800448c <HAL_RTC_Init+0xd8>)
 800440a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800440e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004412:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_RTC_Init+0xd8>)
 8004416:	699a      	ldr	r2, [r3, #24]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6859      	ldr	r1, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	4319      	orrs	r1, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	430b      	orrs	r3, r1
 8004428:	4918      	ldr	r1, [pc, #96]	; (800448c <HAL_RTC_Init+0xd8>)
 800442a:	4313      	orrs	r3, r2
 800442c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	041b      	lsls	r3, r3, #16
 8004438:	4914      	ldr	r1, [pc, #80]	; (800448c <HAL_RTC_Init+0xd8>)
 800443a:	4313      	orrs	r3, r2
 800443c:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f880 	bl	8004544 <RTC_ExitInitMode>
 8004444:	4603      	mov	r3, r0
 8004446:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10e      	bne.n	800446c <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 800444e:	4b0f      	ldr	r3, [pc, #60]	; (800448c <HAL_RTC_Init+0xd8>)
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a19      	ldr	r1, [r3, #32]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	4319      	orrs	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	430b      	orrs	r3, r1
 8004466:	4909      	ldr	r1, [pc, #36]	; (800448c <HAL_RTC_Init+0xd8>)
 8004468:	4313      	orrs	r3, r2
 800446a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RTC_Init+0xd8>)
 800446e:	22ff      	movs	r2, #255	; 0xff
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d103      	bne.n	8004480 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40002800 	.word	0x40002800

08004490 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_RTC_WaitForSynchro+0x48>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a0e      	ldr	r2, [pc, #56]	; (80044d8 <HAL_RTC_WaitForSynchro+0x48>)
 800449e:	f023 0320 	bic.w	r3, r3, #32
 80044a2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80044a4:	f7fc fe9e 	bl	80011e4 <HAL_GetTick>
 80044a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80044aa:	e009      	b.n	80044c0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044ac:	f7fc fe9a 	bl	80011e4 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044ba:	d901      	bls.n	80044c0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e006      	b.n	80044ce <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RTC_WaitForSynchro+0x48>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0ef      	beq.n	80044ac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40002800 	.word	0x40002800

080044dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80044e8:	4b15      	ldr	r3, [pc, #84]	; (8004540 <RTC_EnterInitMode+0x64>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d120      	bne.n	8004536 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80044f4:	4b12      	ldr	r3, [pc, #72]	; (8004540 <RTC_EnterInitMode+0x64>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a11      	ldr	r2, [pc, #68]	; (8004540 <RTC_EnterInitMode+0x64>)
 80044fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fe:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004500:	f7fc fe70 	bl	80011e4 <HAL_GetTick>
 8004504:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004506:	e00d      	b.n	8004524 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004508:	f7fc fe6c 	bl	80011e4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004516:	d905      	bls.n	8004524 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2203      	movs	r2, #3
 8004520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <RTC_EnterInitMode+0x64>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <RTC_EnterInitMode+0x5a>
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d1e8      	bne.n	8004508 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40002800 	.word	0x40002800

08004544 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004550:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <RTC_ExitInitMode+0x78>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a19      	ldr	r2, [pc, #100]	; (80045bc <RTC_ExitInitMode+0x78>)
 8004556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800455a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800455c:	4b17      	ldr	r3, [pc, #92]	; (80045bc <RTC_ExitInitMode+0x78>)
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10c      	bne.n	8004582 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff ff91 	bl	8004490 <HAL_RTC_WaitForSynchro>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01e      	beq.n	80045b2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2203      	movs	r2, #3
 8004578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	e017      	b.n	80045b2 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <RTC_ExitInitMode+0x78>)
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	4a0d      	ldr	r2, [pc, #52]	; (80045bc <RTC_ExitInitMode+0x78>)
 8004588:	f023 0320 	bic.w	r3, r3, #32
 800458c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff ff7e 	bl	8004490 <HAL_RTC_WaitForSynchro>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2203      	movs	r2, #3
 800459e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <RTC_ExitInitMode+0x78>)
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	4a04      	ldr	r2, [pc, #16]	; (80045bc <RTC_ExitInitMode+0x78>)
 80045ac:	f043 0320 	orr.w	r3, r3, #32
 80045b0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40002800 	.word	0x40002800

080045c0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	490f      	ldr	r1, [pc, #60]	; (8004610 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	490c      	ldr	r1, [pc, #48]	; (8004614 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6919      	ldr	r1, [r3, #16]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	041b      	lsls	r3, r3, #16
 80045f8:	430b      	orrs	r3, r1
 80045fa:	4906      	ldr	r1, [pc, #24]	; (8004614 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40002800 	.word	0x40002800
 8004614:	40003400 	.word	0x40003400

08004618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e042      	b.n	80046b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004630:	2b00      	cmp	r3, #0
 8004632:	d106      	bne.n	8004642 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7fc fc55 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2224      	movs	r2, #36	; 0x24
 8004646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8c2 	bl	80047e4 <UART_SetConfig>
 8004660:	4603      	mov	r3, r0
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e022      	b.n	80046b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fb84 	bl	8004d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fc0b 	bl	8004ec4 <UART_CheckIdleState>
 80046ae:	4603      	mov	r3, r0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	f040 8083 	bne.w	80047da <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_UART_Transmit+0x28>
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e07b      	b.n	80047dc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Transmit+0x3a>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e074      	b.n	80047dc <HAL_UART_Transmit+0x124>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2221      	movs	r2, #33	; 0x21
 8004706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470a:	f7fc fd6b 	bl	80011e4 <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	88fa      	ldrh	r2, [r7, #6]
 8004714:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004728:	d108      	bne.n	800473c <HAL_UART_Transmit+0x84>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e003      	b.n	8004744 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800474c:	e02c      	b.n	80047a8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2200      	movs	r2, #0
 8004756:	2180      	movs	r1, #128	; 0x80
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fbfe 	bl	8004f5a <UART_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e039      	b.n	80047dc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800477c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	3302      	adds	r3, #2
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	e007      	b.n	8004796 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	781a      	ldrb	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	3301      	adds	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1cc      	bne.n	800474e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2200      	movs	r2, #0
 80047bc:	2140      	movs	r1, #64	; 0x40
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fbcb 	bl	8004f5a <UART_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e006      	b.n	80047dc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e000      	b.n	80047dc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80047da:	2302      	movs	r3, #2
  }
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3720      	adds	r7, #32
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e4:	b5b0      	push	{r4, r5, r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	4313      	orrs	r3, r2
 8004806:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4bb1      	ldr	r3, [pc, #708]	; (8004ad4 <UART_SetConfig+0x2f0>)
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	69f9      	ldr	r1, [r7, #28]
 8004818:	430b      	orrs	r3, r1
 800481a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4aa6      	ldr	r2, [pc, #664]	; (8004ad8 <UART_SetConfig+0x2f4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	4313      	orrs	r3, r2
 800484a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004856:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	69f9      	ldr	r1, [r7, #28]
 8004860:	430b      	orrs	r3, r1
 8004862:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	f023 010f 	bic.w	r1, r3, #15
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a97      	ldr	r2, [pc, #604]	; (8004adc <UART_SetConfig+0x2f8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d120      	bne.n	80048c6 <UART_SetConfig+0xe2>
 8004884:	4b96      	ldr	r3, [pc, #600]	; (8004ae0 <UART_SetConfig+0x2fc>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b03      	cmp	r3, #3
 8004890:	d816      	bhi.n	80048c0 <UART_SetConfig+0xdc>
 8004892:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <UART_SetConfig+0xb4>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	080048a9 	.word	0x080048a9
 800489c:	080048b5 	.word	0x080048b5
 80048a0:	080048af 	.word	0x080048af
 80048a4:	080048bb 	.word	0x080048bb
 80048a8:	2301      	movs	r3, #1
 80048aa:	76fb      	strb	r3, [r7, #27]
 80048ac:	e0e7      	b.n	8004a7e <UART_SetConfig+0x29a>
 80048ae:	2302      	movs	r3, #2
 80048b0:	76fb      	strb	r3, [r7, #27]
 80048b2:	e0e4      	b.n	8004a7e <UART_SetConfig+0x29a>
 80048b4:	2304      	movs	r3, #4
 80048b6:	76fb      	strb	r3, [r7, #27]
 80048b8:	e0e1      	b.n	8004a7e <UART_SetConfig+0x29a>
 80048ba:	2308      	movs	r3, #8
 80048bc:	76fb      	strb	r3, [r7, #27]
 80048be:	e0de      	b.n	8004a7e <UART_SetConfig+0x29a>
 80048c0:	2310      	movs	r3, #16
 80048c2:	76fb      	strb	r3, [r7, #27]
 80048c4:	e0db      	b.n	8004a7e <UART_SetConfig+0x29a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a86      	ldr	r2, [pc, #536]	; (8004ae4 <UART_SetConfig+0x300>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d132      	bne.n	8004936 <UART_SetConfig+0x152>
 80048d0:	4b83      	ldr	r3, [pc, #524]	; (8004ae0 <UART_SetConfig+0x2fc>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d828      	bhi.n	8004930 <UART_SetConfig+0x14c>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0x100>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	08004919 	.word	0x08004919
 80048e8:	08004931 	.word	0x08004931
 80048ec:	08004931 	.word	0x08004931
 80048f0:	08004931 	.word	0x08004931
 80048f4:	08004925 	.word	0x08004925
 80048f8:	08004931 	.word	0x08004931
 80048fc:	08004931 	.word	0x08004931
 8004900:	08004931 	.word	0x08004931
 8004904:	0800491f 	.word	0x0800491f
 8004908:	08004931 	.word	0x08004931
 800490c:	08004931 	.word	0x08004931
 8004910:	08004931 	.word	0x08004931
 8004914:	0800492b 	.word	0x0800492b
 8004918:	2300      	movs	r3, #0
 800491a:	76fb      	strb	r3, [r7, #27]
 800491c:	e0af      	b.n	8004a7e <UART_SetConfig+0x29a>
 800491e:	2302      	movs	r3, #2
 8004920:	76fb      	strb	r3, [r7, #27]
 8004922:	e0ac      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004924:	2304      	movs	r3, #4
 8004926:	76fb      	strb	r3, [r7, #27]
 8004928:	e0a9      	b.n	8004a7e <UART_SetConfig+0x29a>
 800492a:	2308      	movs	r3, #8
 800492c:	76fb      	strb	r3, [r7, #27]
 800492e:	e0a6      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004930:	2310      	movs	r3, #16
 8004932:	76fb      	strb	r3, [r7, #27]
 8004934:	e0a3      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6b      	ldr	r2, [pc, #428]	; (8004ae8 <UART_SetConfig+0x304>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d120      	bne.n	8004982 <UART_SetConfig+0x19e>
 8004940:	4b67      	ldr	r3, [pc, #412]	; (8004ae0 <UART_SetConfig+0x2fc>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800494a:	2b30      	cmp	r3, #48	; 0x30
 800494c:	d013      	beq.n	8004976 <UART_SetConfig+0x192>
 800494e:	2b30      	cmp	r3, #48	; 0x30
 8004950:	d814      	bhi.n	800497c <UART_SetConfig+0x198>
 8004952:	2b20      	cmp	r3, #32
 8004954:	d009      	beq.n	800496a <UART_SetConfig+0x186>
 8004956:	2b20      	cmp	r3, #32
 8004958:	d810      	bhi.n	800497c <UART_SetConfig+0x198>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <UART_SetConfig+0x180>
 800495e:	2b10      	cmp	r3, #16
 8004960:	d006      	beq.n	8004970 <UART_SetConfig+0x18c>
 8004962:	e00b      	b.n	800497c <UART_SetConfig+0x198>
 8004964:	2300      	movs	r3, #0
 8004966:	76fb      	strb	r3, [r7, #27]
 8004968:	e089      	b.n	8004a7e <UART_SetConfig+0x29a>
 800496a:	2302      	movs	r3, #2
 800496c:	76fb      	strb	r3, [r7, #27]
 800496e:	e086      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004970:	2304      	movs	r3, #4
 8004972:	76fb      	strb	r3, [r7, #27]
 8004974:	e083      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004976:	2308      	movs	r3, #8
 8004978:	76fb      	strb	r3, [r7, #27]
 800497a:	e080      	b.n	8004a7e <UART_SetConfig+0x29a>
 800497c:	2310      	movs	r3, #16
 800497e:	76fb      	strb	r3, [r7, #27]
 8004980:	e07d      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a59      	ldr	r2, [pc, #356]	; (8004aec <UART_SetConfig+0x308>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d120      	bne.n	80049ce <UART_SetConfig+0x1ea>
 800498c:	4b54      	ldr	r3, [pc, #336]	; (8004ae0 <UART_SetConfig+0x2fc>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004996:	2bc0      	cmp	r3, #192	; 0xc0
 8004998:	d013      	beq.n	80049c2 <UART_SetConfig+0x1de>
 800499a:	2bc0      	cmp	r3, #192	; 0xc0
 800499c:	d814      	bhi.n	80049c8 <UART_SetConfig+0x1e4>
 800499e:	2b80      	cmp	r3, #128	; 0x80
 80049a0:	d009      	beq.n	80049b6 <UART_SetConfig+0x1d2>
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d810      	bhi.n	80049c8 <UART_SetConfig+0x1e4>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <UART_SetConfig+0x1cc>
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d006      	beq.n	80049bc <UART_SetConfig+0x1d8>
 80049ae:	e00b      	b.n	80049c8 <UART_SetConfig+0x1e4>
 80049b0:	2300      	movs	r3, #0
 80049b2:	76fb      	strb	r3, [r7, #27]
 80049b4:	e063      	b.n	8004a7e <UART_SetConfig+0x29a>
 80049b6:	2302      	movs	r3, #2
 80049b8:	76fb      	strb	r3, [r7, #27]
 80049ba:	e060      	b.n	8004a7e <UART_SetConfig+0x29a>
 80049bc:	2304      	movs	r3, #4
 80049be:	76fb      	strb	r3, [r7, #27]
 80049c0:	e05d      	b.n	8004a7e <UART_SetConfig+0x29a>
 80049c2:	2308      	movs	r3, #8
 80049c4:	76fb      	strb	r3, [r7, #27]
 80049c6:	e05a      	b.n	8004a7e <UART_SetConfig+0x29a>
 80049c8:	2310      	movs	r3, #16
 80049ca:	76fb      	strb	r3, [r7, #27]
 80049cc:	e057      	b.n	8004a7e <UART_SetConfig+0x29a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a47      	ldr	r2, [pc, #284]	; (8004af0 <UART_SetConfig+0x30c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d125      	bne.n	8004a24 <UART_SetConfig+0x240>
 80049d8:	4b41      	ldr	r3, [pc, #260]	; (8004ae0 <UART_SetConfig+0x2fc>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049e6:	d017      	beq.n	8004a18 <UART_SetConfig+0x234>
 80049e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ec:	d817      	bhi.n	8004a1e <UART_SetConfig+0x23a>
 80049ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f2:	d00b      	beq.n	8004a0c <UART_SetConfig+0x228>
 80049f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f8:	d811      	bhi.n	8004a1e <UART_SetConfig+0x23a>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <UART_SetConfig+0x222>
 80049fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a02:	d006      	beq.n	8004a12 <UART_SetConfig+0x22e>
 8004a04:	e00b      	b.n	8004a1e <UART_SetConfig+0x23a>
 8004a06:	2300      	movs	r3, #0
 8004a08:	76fb      	strb	r3, [r7, #27]
 8004a0a:	e038      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	76fb      	strb	r3, [r7, #27]
 8004a10:	e035      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004a12:	2304      	movs	r3, #4
 8004a14:	76fb      	strb	r3, [r7, #27]
 8004a16:	e032      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	76fb      	strb	r3, [r7, #27]
 8004a1c:	e02f      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004a1e:	2310      	movs	r3, #16
 8004a20:	76fb      	strb	r3, [r7, #27]
 8004a22:	e02c      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2b      	ldr	r2, [pc, #172]	; (8004ad8 <UART_SetConfig+0x2f4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d125      	bne.n	8004a7a <UART_SetConfig+0x296>
 8004a2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ae0 <UART_SetConfig+0x2fc>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a3c:	d017      	beq.n	8004a6e <UART_SetConfig+0x28a>
 8004a3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a42:	d817      	bhi.n	8004a74 <UART_SetConfig+0x290>
 8004a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a48:	d00b      	beq.n	8004a62 <UART_SetConfig+0x27e>
 8004a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4e:	d811      	bhi.n	8004a74 <UART_SetConfig+0x290>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <UART_SetConfig+0x278>
 8004a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a58:	d006      	beq.n	8004a68 <UART_SetConfig+0x284>
 8004a5a:	e00b      	b.n	8004a74 <UART_SetConfig+0x290>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	76fb      	strb	r3, [r7, #27]
 8004a60:	e00d      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004a62:	2302      	movs	r3, #2
 8004a64:	76fb      	strb	r3, [r7, #27]
 8004a66:	e00a      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	76fb      	strb	r3, [r7, #27]
 8004a6c:	e007      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004a6e:	2308      	movs	r3, #8
 8004a70:	76fb      	strb	r3, [r7, #27]
 8004a72:	e004      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004a74:	2310      	movs	r3, #16
 8004a76:	76fb      	strb	r3, [r7, #27]
 8004a78:	e001      	b.n	8004a7e <UART_SetConfig+0x29a>
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <UART_SetConfig+0x2f4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	f040 80a3 	bne.w	8004bd0 <UART_SetConfig+0x3ec>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a8a:	7efb      	ldrb	r3, [r7, #27]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d83b      	bhi.n	8004b08 <UART_SetConfig+0x324>
 8004a90:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <UART_SetConfig+0x2b4>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004abd 	.word	0x08004abd
 8004a9c:	08004ac5 	.word	0x08004ac5
 8004aa0:	08004acd 	.word	0x08004acd
 8004aa4:	08004b09 	.word	0x08004b09
 8004aa8:	08004af9 	.word	0x08004af9
 8004aac:	08004b09 	.word	0x08004b09
 8004ab0:	08004b09 	.word	0x08004b09
 8004ab4:	08004b09 	.word	0x08004b09
 8004ab8:	08004b01 	.word	0x08004b01
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004abc:	f7fe fe5e 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 8004ac0:	6178      	str	r0, [r7, #20]
        break;
 8004ac2:	e026      	b.n	8004b12 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac4:	f7fe fe6e 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 8004ac8:	6178      	str	r0, [r7, #20]
        break;
 8004aca:	e022      	b.n	8004b12 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004acc:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <UART_SetConfig+0x310>)
 8004ace:	617b      	str	r3, [r7, #20]
        break;
 8004ad0:	e01f      	b.n	8004b12 <UART_SetConfig+0x32e>
 8004ad2:	bf00      	nop
 8004ad4:	cfff69f3 	.word	0xcfff69f3
 8004ad8:	40008000 	.word	0x40008000
 8004adc:	40013800 	.word	0x40013800
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40004400 	.word	0x40004400
 8004ae8:	40004800 	.word	0x40004800
 8004aec:	40004c00 	.word	0x40004c00
 8004af0:	40005000 	.word	0x40005000
 8004af4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af8:	f7fe fd8e 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8004afc:	6178      	str	r0, [r7, #20]
        break;
 8004afe:	e008      	b.n	8004b12 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b04:	617b      	str	r3, [r7, #20]
        break;
 8004b06:	e004      	b.n	8004b12 <UART_SetConfig+0x32e>
      default:
        pclk = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	76bb      	strb	r3, [r7, #26]
        break;
 8004b10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 811b 	beq.w	8004d50 <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	4a96      	ldr	r2, [pc, #600]	; (8004d78 <UART_SetConfig+0x594>)
 8004b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b24:	461a      	mov	r2, r3
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b2c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d305      	bcc.n	8004b4a <UART_SetConfig+0x366>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d902      	bls.n	8004b50 <UART_SetConfig+0x36c>
      {
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	76bb      	strb	r3, [r7, #26]
 8004b4e:	e0ff      	b.n	8004d50 <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	4a86      	ldr	r2, [pc, #536]	; (8004d78 <UART_SetConfig+0x594>)
 8004b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	f7fb fb64 	bl	8000234 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4610      	mov	r0, r2
 8004b72:	4619      	mov	r1, r3
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	020b      	lsls	r3, r1, #8
 8004b7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b82:	0202      	lsls	r2, r0, #8
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	6849      	ldr	r1, [r1, #4]
 8004b88:	0849      	lsrs	r1, r1, #1
 8004b8a:	4608      	mov	r0, r1
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	1814      	adds	r4, r2, r0
 8004b92:	eb43 0501 	adc.w	r5, r3, r1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	f7fb fb46 	bl	8000234 <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4613      	mov	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bb6:	d308      	bcc.n	8004bca <UART_SetConfig+0x3e6>
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bbe:	d204      	bcs.n	8004bca <UART_SetConfig+0x3e6>
        {
          huart->Instance->BRR = usartdiv;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	e0c2      	b.n	8004d50 <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	76bb      	strb	r3, [r7, #26]
 8004bce:	e0bf      	b.n	8004d50 <UART_SetConfig+0x56c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd8:	d165      	bne.n	8004ca6 <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 8004bda:	7efb      	ldrb	r3, [r7, #27]
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d828      	bhi.n	8004c32 <UART_SetConfig+0x44e>
 8004be0:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <UART_SetConfig+0x404>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c1d 	.word	0x08004c1d
 8004bf4:	08004c33 	.word	0x08004c33
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c33 	.word	0x08004c33
 8004c00:	08004c33 	.word	0x08004c33
 8004c04:	08004c33 	.word	0x08004c33
 8004c08:	08004c2b 	.word	0x08004c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c0c:	f7fe fdb6 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 8004c10:	6178      	str	r0, [r7, #20]
        break;
 8004c12:	e013      	b.n	8004c3c <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c14:	f7fe fdc6 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 8004c18:	6178      	str	r0, [r7, #20]
        break;
 8004c1a:	e00f      	b.n	8004c3c <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c1c:	4b57      	ldr	r3, [pc, #348]	; (8004d7c <UART_SetConfig+0x598>)
 8004c1e:	617b      	str	r3, [r7, #20]
        break;
 8004c20:	e00c      	b.n	8004c3c <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c22:	f7fe fcf9 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8004c26:	6178      	str	r0, [r7, #20]
        break;
 8004c28:	e008      	b.n	8004c3c <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c2e:	617b      	str	r3, [r7, #20]
        break;
 8004c30:	e004      	b.n	8004c3c <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	76bb      	strb	r3, [r7, #26]
        break;
 8004c3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8086 	beq.w	8004d50 <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	4a4b      	ldr	r2, [pc, #300]	; (8004d78 <UART_SetConfig+0x594>)
 8004c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c56:	005a      	lsls	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	441a      	add	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b0f      	cmp	r3, #15
 8004c70:	d916      	bls.n	8004ca0 <UART_SetConfig+0x4bc>
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c78:	d212      	bcs.n	8004ca0 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f023 030f 	bic.w	r3, r3, #15
 8004c82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	89fb      	ldrh	r3, [r7, #14]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	89fa      	ldrh	r2, [r7, #14]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e057      	b.n	8004d50 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	76bb      	strb	r3, [r7, #26]
 8004ca4:	e054      	b.n	8004d50 <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ca6:	7efb      	ldrb	r3, [r7, #27]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d828      	bhi.n	8004cfe <UART_SetConfig+0x51a>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x4d0>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004ce1 	.word	0x08004ce1
 8004cbc:	08004ce9 	.word	0x08004ce9
 8004cc0:	08004cff 	.word	0x08004cff
 8004cc4:	08004cef 	.word	0x08004cef
 8004cc8:	08004cff 	.word	0x08004cff
 8004ccc:	08004cff 	.word	0x08004cff
 8004cd0:	08004cff 	.word	0x08004cff
 8004cd4:	08004cf7 	.word	0x08004cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7fe fd50 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 8004cdc:	6178      	str	r0, [r7, #20]
        break;
 8004cde:	e013      	b.n	8004d08 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce0:	f7fe fd60 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 8004ce4:	6178      	str	r0, [r7, #20]
        break;
 8004ce6:	e00f      	b.n	8004d08 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce8:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <UART_SetConfig+0x598>)
 8004cea:	617b      	str	r3, [r7, #20]
        break;
 8004cec:	e00c      	b.n	8004d08 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cee:	f7fe fc93 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8004cf2:	6178      	str	r0, [r7, #20]
        break;
 8004cf4:	e008      	b.n	8004d08 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfa:	617b      	str	r3, [r7, #20]
        break;
 8004cfc:	e004      	b.n	8004d08 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	76bb      	strb	r3, [r7, #26]
        break;
 8004d06:	bf00      	nop
    }

    if (pclk != 0U)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d020      	beq.n	8004d50 <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <UART_SetConfig+0x594>)
 8004d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	441a      	add	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b0f      	cmp	r3, #15
 8004d38:	d908      	bls.n	8004d4c <UART_SetConfig+0x568>
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d40:	d204      	bcs.n	8004d4c <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	e001      	b.n	8004d50 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d6c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bdb0      	pop	{r4, r5, r7, pc}
 8004d76:	bf00      	nop
 8004d78:	080060b0 	.word	0x080060b0
 8004d7c:	00f42400 	.word	0x00f42400

08004d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01a      	beq.n	8004e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7e:	d10a      	bne.n	8004e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  }
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ed4:	f7fc f986 	bl	80011e4 <HAL_GetTick>
 8004ed8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d10e      	bne.n	8004f06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f82f 	bl	8004f5a <UART_WaitOnFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e025      	b.n	8004f52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d10e      	bne.n	8004f32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f819 	bl	8004f5a <UART_WaitOnFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e00f      	b.n	8004f52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	4613      	mov	r3, r2
 8004f68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6a:	e062      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d05e      	beq.n	8005032 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f74:	f7fc f936 	bl	80011e4 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d302      	bcc.n	8004f8a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d11d      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0201 	bic.w	r2, r2, #1
 8004fa8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e045      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d02e      	beq.n	8005032 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe2:	d126      	bne.n	8005032 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ffc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e00f      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4013      	ands	r3, r2
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	429a      	cmp	r2, r3
 8005040:	bf0c      	ite	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	2300      	movne	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	429a      	cmp	r2, r3
 800504e:	d08d      	beq.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_UARTEx_DisableFifoMode+0x16>
 800506c:	2302      	movs	r3, #2
 800506e:	e027      	b.n	80050c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2224      	movs	r2, #36	; 0x24
 800507c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800509e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e02d      	b.n	8005140 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2224      	movs	r2, #36	; 0x24
 80050f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0201 	bic.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f84f 	bl	80051c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800515c:	2302      	movs	r3, #2
 800515e:	e02d      	b.n	80051bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2224      	movs	r2, #36	; 0x24
 800516c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f811 	bl	80051c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d108      	bne.n	80051e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051e4:	e031      	b.n	800524a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051e6:	2308      	movs	r3, #8
 80051e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051ea:	2308      	movs	r3, #8
 80051ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	0e5b      	lsrs	r3, r3, #25
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	0f5b      	lsrs	r3, r3, #29
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800520e:	7bbb      	ldrb	r3, [r7, #14]
 8005210:	7b3a      	ldrb	r2, [r7, #12]
 8005212:	4911      	ldr	r1, [pc, #68]	; (8005258 <UARTEx_SetNbDataToProcess+0x94>)
 8005214:	5c8a      	ldrb	r2, [r1, r2]
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	7b3a      	ldrb	r2, [r7, #12]
 800521c:	490f      	ldr	r1, [pc, #60]	; (800525c <UARTEx_SetNbDataToProcess+0x98>)
 800521e:	5c8a      	ldrb	r2, [r1, r2]
 8005220:	fb93 f3f2 	sdiv	r3, r3, r2
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	7b7a      	ldrb	r2, [r7, #13]
 8005230:	4909      	ldr	r1, [pc, #36]	; (8005258 <UARTEx_SetNbDataToProcess+0x94>)
 8005232:	5c8a      	ldrb	r2, [r1, r2]
 8005234:	fb02 f303 	mul.w	r3, r2, r3
 8005238:	7b7a      	ldrb	r2, [r7, #13]
 800523a:	4908      	ldr	r1, [pc, #32]	; (800525c <UARTEx_SetNbDataToProcess+0x98>)
 800523c:	5c8a      	ldrb	r2, [r1, r2]
 800523e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005242:	b29a      	uxth	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	080060c8 	.word	0x080060c8
 800525c:	080060d0 	.word	0x080060d0

08005260 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005260:	b480      	push	{r7}
 8005262:	b08b      	sub	sp, #44	; 0x2c
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	fa93 f3a3 	rbit	r3, r3
 800527a:	613b      	str	r3, [r7, #16]
  return result;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005286:	2320      	movs	r3, #32
 8005288:	e003      	b.n	8005292 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	fab3 f383 	clz	r3, r3
 8005290:	b2db      	uxtb	r3, r3
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	2103      	movs	r1, #3
 8005296:	fa01 f303 	lsl.w	r3, r1, r3
 800529a:	43db      	mvns	r3, r3
 800529c:	401a      	ands	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	fa93 f3a3 	rbit	r3, r3
 80052a8:	61fb      	str	r3, [r7, #28]
  return result;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80052b4:	2320      	movs	r3, #32
 80052b6:	e003      	b.n	80052c0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	fab3 f383 	clz	r3, r3
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	372c      	adds	r7, #44	; 0x2c
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	401a      	ands	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	fb01 f303 	mul.w	r3, r1, r3
 80052f8:	431a      	orrs	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	605a      	str	r2, [r3, #4]
}
 80052fe:	bf00      	nop
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800530a:	b480      	push	{r7}
 800530c:	b08b      	sub	sp, #44	; 0x2c
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	fa93 f3a3 	rbit	r3, r3
 8005324:	613b      	str	r3, [r7, #16]
  return result;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005330:	2320      	movs	r3, #32
 8005332:	e003      	b.n	800533c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	fab3 f383 	clz	r3, r3
 800533a:	b2db      	uxtb	r3, r3
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	2103      	movs	r1, #3
 8005340:	fa01 f303 	lsl.w	r3, r1, r3
 8005344:	43db      	mvns	r3, r3
 8005346:	401a      	ands	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	fa93 f3a3 	rbit	r3, r3
 8005352:	61fb      	str	r3, [r7, #28]
  return result;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800535e:	2320      	movs	r3, #32
 8005360:	e003      	b.n	800536a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	fab3 f383 	clz	r3, r3
 8005368:	b2db      	uxtb	r3, r3
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	fa01 f303 	lsl.w	r3, r1, r3
 8005372:	431a      	orrs	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005378:	bf00      	nop
 800537a:	372c      	adds	r7, #44	; 0x2c
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005384:	b480      	push	{r7}
 8005386:	b08b      	sub	sp, #44	; 0x2c
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	fa93 f3a3 	rbit	r3, r3
 800539e:	613b      	str	r3, [r7, #16]
  return result;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80053aa:	2320      	movs	r3, #32
 80053ac:	e003      	b.n	80053b6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	fab3 f383 	clz	r3, r3
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	2103      	movs	r1, #3
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	401a      	ands	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	fa93 f3a3 	rbit	r3, r3
 80053cc:	61fb      	str	r3, [r7, #28]
  return result;
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80053d8:	2320      	movs	r3, #32
 80053da:	e003      	b.n	80053e4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	fab3 f383 	clz	r3, r3
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	431a      	orrs	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	60da      	str	r2, [r3, #12]
}
 80053f2:	bf00      	nop
 80053f4:	372c      	adds	r7, #44	; 0x2c
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80053fe:	b480      	push	{r7}
 8005400:	b08b      	sub	sp, #44	; 0x2c
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	fa93 f3a3 	rbit	r3, r3
 8005418:	613b      	str	r3, [r7, #16]
  return result;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005424:	2320      	movs	r3, #32
 8005426:	e003      	b.n	8005430 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	fab3 f383 	clz	r3, r3
 800542e:	b2db      	uxtb	r3, r3
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	210f      	movs	r1, #15
 8005434:	fa01 f303 	lsl.w	r3, r1, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	401a      	ands	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	fa93 f3a3 	rbit	r3, r3
 8005446:	61fb      	str	r3, [r7, #28]
  return result;
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005452:	2320      	movs	r3, #32
 8005454:	e003      	b.n	800545e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	fab3 f383 	clz	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	fa01 f303 	lsl.w	r3, r1, r3
 8005466:	431a      	orrs	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800546c:	bf00      	nop
 800546e:	372c      	adds	r7, #44	; 0x2c
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005478:	b480      	push	{r7}
 800547a:	b08b      	sub	sp, #44	; 0x2c
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	fa93 f3a3 	rbit	r3, r3
 8005494:	613b      	str	r3, [r7, #16]
  return result;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80054a0:	2320      	movs	r3, #32
 80054a2:	e003      	b.n	80054ac <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	fab3 f383 	clz	r3, r3
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	210f      	movs	r1, #15
 80054b0:	fa01 f303 	lsl.w	r3, r1, r3
 80054b4:	43db      	mvns	r3, r3
 80054b6:	401a      	ands	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	0a1b      	lsrs	r3, r3, #8
 80054bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	fa93 f3a3 	rbit	r3, r3
 80054c4:	61fb      	str	r3, [r7, #28]
  return result;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80054d0:	2320      	movs	r3, #32
 80054d2:	e003      	b.n	80054dc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	fab3 f383 	clz	r3, r3
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	fa01 f303 	lsl.w	r3, r1, r3
 80054e4:	431a      	orrs	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80054ea:	bf00      	nop
 80054ec:	372c      	adds	r7, #44	; 0x2c
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b088      	sub	sp, #32
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	fa93 f3a3 	rbit	r3, r3
 800550c:	60fb      	str	r3, [r7, #12]
  return result;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <LL_GPIO_Init+0x26>
    return 32U;
 8005518:	2320      	movs	r3, #32
 800551a:	e003      	b.n	8005524 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	fab3 f383 	clz	r3, r3
 8005522:	b2db      	uxtb	r3, r3
 8005524:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005526:	e047      	b.n	80055b8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	2101      	movs	r1, #1
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	4013      	ands	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d039      	beq.n	80055b2 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d003      	beq.n	800554e <LL_GPIO_Init+0x58>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d10d      	bne.n	800556a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	461a      	mov	r2, r3
 8005554:	69b9      	ldr	r1, [r7, #24]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fed7 	bl	800530a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	461a      	mov	r2, r3
 8005562:	69b9      	ldr	r1, [r7, #24]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff feb8 	bl	80052da <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	461a      	mov	r2, r3
 8005570:	69b9      	ldr	r1, [r7, #24]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff ff06 	bl	8005384 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d111      	bne.n	80055a4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	2bff      	cmp	r3, #255	; 0xff
 8005584:	d807      	bhi.n	8005596 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	461a      	mov	r2, r3
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff ff35 	bl	80053fe <LL_GPIO_SetAFPin_0_7>
 8005594:	e006      	b.n	80055a4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	461a      	mov	r2, r3
 800559c:	69b9      	ldr	r1, [r7, #24]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ff6a 	bl	8005478 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	461a      	mov	r2, r3
 80055aa:	69b9      	ldr	r1, [r7, #24]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff fe57 	bl	8005260 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	3301      	adds	r3, #1
 80055b6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	fa22 f303 	lsr.w	r3, r2, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1b0      	bne.n	8005528 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3720      	adds	r7, #32
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055d8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80055dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	43db      	mvns	r3, r3
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	4013      	ands	r3, r2
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005606:	b084      	sub	sp, #16
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	f107 0014 	add.w	r0, r7, #20
 8005614:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	b004      	add	sp, #16
 8005646:	4770      	bx	lr

08005648 <__errno>:
 8005648:	4b01      	ldr	r3, [pc, #4]	; (8005650 <__errno+0x8>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	2000000c 	.word	0x2000000c

08005654 <__libc_init_array>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	4d0d      	ldr	r5, [pc, #52]	; (800568c <__libc_init_array+0x38>)
 8005658:	2600      	movs	r6, #0
 800565a:	4c0d      	ldr	r4, [pc, #52]	; (8005690 <__libc_init_array+0x3c>)
 800565c:	1b64      	subs	r4, r4, r5
 800565e:	10a4      	asrs	r4, r4, #2
 8005660:	42a6      	cmp	r6, r4
 8005662:	d109      	bne.n	8005678 <__libc_init_array+0x24>
 8005664:	4d0b      	ldr	r5, [pc, #44]	; (8005694 <__libc_init_array+0x40>)
 8005666:	2600      	movs	r6, #0
 8005668:	4c0b      	ldr	r4, [pc, #44]	; (8005698 <__libc_init_array+0x44>)
 800566a:	f000 fce3 	bl	8006034 <_init>
 800566e:	1b64      	subs	r4, r4, r5
 8005670:	10a4      	asrs	r4, r4, #2
 8005672:	42a6      	cmp	r6, r4
 8005674:	d105      	bne.n	8005682 <__libc_init_array+0x2e>
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	f855 3b04 	ldr.w	r3, [r5], #4
 800567c:	3601      	adds	r6, #1
 800567e:	4798      	blx	r3
 8005680:	e7ee      	b.n	8005660 <__libc_init_array+0xc>
 8005682:	f855 3b04 	ldr.w	r3, [r5], #4
 8005686:	3601      	adds	r6, #1
 8005688:	4798      	blx	r3
 800568a:	e7f2      	b.n	8005672 <__libc_init_array+0x1e>
 800568c:	08006144 	.word	0x08006144
 8005690:	08006144 	.word	0x08006144
 8005694:	08006144 	.word	0x08006144
 8005698:	08006148 	.word	0x08006148

0800569c <memset>:
 800569c:	4402      	add	r2, r0
 800569e:	4603      	mov	r3, r0
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d100      	bne.n	80056a6 <memset+0xa>
 80056a4:	4770      	bx	lr
 80056a6:	f803 1b01 	strb.w	r1, [r3], #1
 80056aa:	e7f9      	b.n	80056a0 <memset+0x4>

080056ac <_puts_r>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	460e      	mov	r6, r1
 80056b0:	4605      	mov	r5, r0
 80056b2:	b118      	cbz	r0, 80056bc <_puts_r+0x10>
 80056b4:	6983      	ldr	r3, [r0, #24]
 80056b6:	b90b      	cbnz	r3, 80056bc <_puts_r+0x10>
 80056b8:	f000 fa46 	bl	8005b48 <__sinit>
 80056bc:	69ab      	ldr	r3, [r5, #24]
 80056be:	68ac      	ldr	r4, [r5, #8]
 80056c0:	b913      	cbnz	r3, 80056c8 <_puts_r+0x1c>
 80056c2:	4628      	mov	r0, r5
 80056c4:	f000 fa40 	bl	8005b48 <__sinit>
 80056c8:	4b2c      	ldr	r3, [pc, #176]	; (800577c <_puts_r+0xd0>)
 80056ca:	429c      	cmp	r4, r3
 80056cc:	d120      	bne.n	8005710 <_puts_r+0x64>
 80056ce:	686c      	ldr	r4, [r5, #4]
 80056d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056d2:	07db      	lsls	r3, r3, #31
 80056d4:	d405      	bmi.n	80056e2 <_puts_r+0x36>
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	0598      	lsls	r0, r3, #22
 80056da:	d402      	bmi.n	80056e2 <_puts_r+0x36>
 80056dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056de:	f000 fad1 	bl	8005c84 <__retarget_lock_acquire_recursive>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	0719      	lsls	r1, r3, #28
 80056e6:	d51d      	bpl.n	8005724 <_puts_r+0x78>
 80056e8:	6923      	ldr	r3, [r4, #16]
 80056ea:	b1db      	cbz	r3, 8005724 <_puts_r+0x78>
 80056ec:	3e01      	subs	r6, #1
 80056ee:	68a3      	ldr	r3, [r4, #8]
 80056f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056f4:	3b01      	subs	r3, #1
 80056f6:	60a3      	str	r3, [r4, #8]
 80056f8:	bb39      	cbnz	r1, 800574a <_puts_r+0x9e>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	da38      	bge.n	8005770 <_puts_r+0xc4>
 80056fe:	4622      	mov	r2, r4
 8005700:	210a      	movs	r1, #10
 8005702:	4628      	mov	r0, r5
 8005704:	f000 f848 	bl	8005798 <__swbuf_r>
 8005708:	3001      	adds	r0, #1
 800570a:	d011      	beq.n	8005730 <_puts_r+0x84>
 800570c:	250a      	movs	r5, #10
 800570e:	e011      	b.n	8005734 <_puts_r+0x88>
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <_puts_r+0xd4>)
 8005712:	429c      	cmp	r4, r3
 8005714:	d101      	bne.n	800571a <_puts_r+0x6e>
 8005716:	68ac      	ldr	r4, [r5, #8]
 8005718:	e7da      	b.n	80056d0 <_puts_r+0x24>
 800571a:	4b1a      	ldr	r3, [pc, #104]	; (8005784 <_puts_r+0xd8>)
 800571c:	429c      	cmp	r4, r3
 800571e:	bf08      	it	eq
 8005720:	68ec      	ldreq	r4, [r5, #12]
 8005722:	e7d5      	b.n	80056d0 <_puts_r+0x24>
 8005724:	4621      	mov	r1, r4
 8005726:	4628      	mov	r0, r5
 8005728:	f000 f888 	bl	800583c <__swsetup_r>
 800572c:	2800      	cmp	r0, #0
 800572e:	d0dd      	beq.n	80056ec <_puts_r+0x40>
 8005730:	f04f 35ff 	mov.w	r5, #4294967295
 8005734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005736:	07da      	lsls	r2, r3, #31
 8005738:	d405      	bmi.n	8005746 <_puts_r+0x9a>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	059b      	lsls	r3, r3, #22
 800573e:	d402      	bmi.n	8005746 <_puts_r+0x9a>
 8005740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005742:	f000 faa0 	bl	8005c86 <__retarget_lock_release_recursive>
 8005746:	4628      	mov	r0, r5
 8005748:	bd70      	pop	{r4, r5, r6, pc}
 800574a:	2b00      	cmp	r3, #0
 800574c:	da04      	bge.n	8005758 <_puts_r+0xac>
 800574e:	69a2      	ldr	r2, [r4, #24]
 8005750:	429a      	cmp	r2, r3
 8005752:	dc06      	bgt.n	8005762 <_puts_r+0xb6>
 8005754:	290a      	cmp	r1, #10
 8005756:	d004      	beq.n	8005762 <_puts_r+0xb6>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	6022      	str	r2, [r4, #0]
 800575e:	7019      	strb	r1, [r3, #0]
 8005760:	e7c5      	b.n	80056ee <_puts_r+0x42>
 8005762:	4622      	mov	r2, r4
 8005764:	4628      	mov	r0, r5
 8005766:	f000 f817 	bl	8005798 <__swbuf_r>
 800576a:	3001      	adds	r0, #1
 800576c:	d1bf      	bne.n	80056ee <_puts_r+0x42>
 800576e:	e7df      	b.n	8005730 <_puts_r+0x84>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	250a      	movs	r5, #10
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	6022      	str	r2, [r4, #0]
 8005778:	701d      	strb	r5, [r3, #0]
 800577a:	e7db      	b.n	8005734 <_puts_r+0x88>
 800577c:	080060fc 	.word	0x080060fc
 8005780:	0800611c 	.word	0x0800611c
 8005784:	080060dc 	.word	0x080060dc

08005788 <puts>:
 8005788:	4b02      	ldr	r3, [pc, #8]	; (8005794 <puts+0xc>)
 800578a:	4601      	mov	r1, r0
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	f7ff bf8d 	b.w	80056ac <_puts_r>
 8005792:	bf00      	nop
 8005794:	2000000c 	.word	0x2000000c

08005798 <__swbuf_r>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	460e      	mov	r6, r1
 800579c:	4614      	mov	r4, r2
 800579e:	4605      	mov	r5, r0
 80057a0:	b118      	cbz	r0, 80057aa <__swbuf_r+0x12>
 80057a2:	6983      	ldr	r3, [r0, #24]
 80057a4:	b90b      	cbnz	r3, 80057aa <__swbuf_r+0x12>
 80057a6:	f000 f9cf 	bl	8005b48 <__sinit>
 80057aa:	4b21      	ldr	r3, [pc, #132]	; (8005830 <__swbuf_r+0x98>)
 80057ac:	429c      	cmp	r4, r3
 80057ae:	d12b      	bne.n	8005808 <__swbuf_r+0x70>
 80057b0:	686c      	ldr	r4, [r5, #4]
 80057b2:	69a3      	ldr	r3, [r4, #24]
 80057b4:	60a3      	str	r3, [r4, #8]
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	071a      	lsls	r2, r3, #28
 80057ba:	d52f      	bpl.n	800581c <__swbuf_r+0x84>
 80057bc:	6923      	ldr	r3, [r4, #16]
 80057be:	b36b      	cbz	r3, 800581c <__swbuf_r+0x84>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	b2f6      	uxtb	r6, r6
 80057c4:	6820      	ldr	r0, [r4, #0]
 80057c6:	4637      	mov	r7, r6
 80057c8:	1ac0      	subs	r0, r0, r3
 80057ca:	6963      	ldr	r3, [r4, #20]
 80057cc:	4283      	cmp	r3, r0
 80057ce:	dc04      	bgt.n	80057da <__swbuf_r+0x42>
 80057d0:	4621      	mov	r1, r4
 80057d2:	4628      	mov	r0, r5
 80057d4:	f000 f924 	bl	8005a20 <_fflush_r>
 80057d8:	bb30      	cbnz	r0, 8005828 <__swbuf_r+0x90>
 80057da:	68a3      	ldr	r3, [r4, #8]
 80057dc:	3001      	adds	r0, #1
 80057de:	3b01      	subs	r3, #1
 80057e0:	60a3      	str	r3, [r4, #8]
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	6022      	str	r2, [r4, #0]
 80057e8:	701e      	strb	r6, [r3, #0]
 80057ea:	6963      	ldr	r3, [r4, #20]
 80057ec:	4283      	cmp	r3, r0
 80057ee:	d004      	beq.n	80057fa <__swbuf_r+0x62>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	07db      	lsls	r3, r3, #31
 80057f4:	d506      	bpl.n	8005804 <__swbuf_r+0x6c>
 80057f6:	2e0a      	cmp	r6, #10
 80057f8:	d104      	bne.n	8005804 <__swbuf_r+0x6c>
 80057fa:	4621      	mov	r1, r4
 80057fc:	4628      	mov	r0, r5
 80057fe:	f000 f90f 	bl	8005a20 <_fflush_r>
 8005802:	b988      	cbnz	r0, 8005828 <__swbuf_r+0x90>
 8005804:	4638      	mov	r0, r7
 8005806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <__swbuf_r+0x9c>)
 800580a:	429c      	cmp	r4, r3
 800580c:	d101      	bne.n	8005812 <__swbuf_r+0x7a>
 800580e:	68ac      	ldr	r4, [r5, #8]
 8005810:	e7cf      	b.n	80057b2 <__swbuf_r+0x1a>
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <__swbuf_r+0xa0>)
 8005814:	429c      	cmp	r4, r3
 8005816:	bf08      	it	eq
 8005818:	68ec      	ldreq	r4, [r5, #12]
 800581a:	e7ca      	b.n	80057b2 <__swbuf_r+0x1a>
 800581c:	4621      	mov	r1, r4
 800581e:	4628      	mov	r0, r5
 8005820:	f000 f80c 	bl	800583c <__swsetup_r>
 8005824:	2800      	cmp	r0, #0
 8005826:	d0cb      	beq.n	80057c0 <__swbuf_r+0x28>
 8005828:	f04f 37ff 	mov.w	r7, #4294967295
 800582c:	e7ea      	b.n	8005804 <__swbuf_r+0x6c>
 800582e:	bf00      	nop
 8005830:	080060fc 	.word	0x080060fc
 8005834:	0800611c 	.word	0x0800611c
 8005838:	080060dc 	.word	0x080060dc

0800583c <__swsetup_r>:
 800583c:	4b32      	ldr	r3, [pc, #200]	; (8005908 <__swsetup_r+0xcc>)
 800583e:	b570      	push	{r4, r5, r6, lr}
 8005840:	681d      	ldr	r5, [r3, #0]
 8005842:	4606      	mov	r6, r0
 8005844:	460c      	mov	r4, r1
 8005846:	b125      	cbz	r5, 8005852 <__swsetup_r+0x16>
 8005848:	69ab      	ldr	r3, [r5, #24]
 800584a:	b913      	cbnz	r3, 8005852 <__swsetup_r+0x16>
 800584c:	4628      	mov	r0, r5
 800584e:	f000 f97b 	bl	8005b48 <__sinit>
 8005852:	4b2e      	ldr	r3, [pc, #184]	; (800590c <__swsetup_r+0xd0>)
 8005854:	429c      	cmp	r4, r3
 8005856:	d10f      	bne.n	8005878 <__swsetup_r+0x3c>
 8005858:	686c      	ldr	r4, [r5, #4]
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005860:	0719      	lsls	r1, r3, #28
 8005862:	d42c      	bmi.n	80058be <__swsetup_r+0x82>
 8005864:	06dd      	lsls	r5, r3, #27
 8005866:	d411      	bmi.n	800588c <__swsetup_r+0x50>
 8005868:	2309      	movs	r3, #9
 800586a:	6033      	str	r3, [r6, #0]
 800586c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005870:	f04f 30ff 	mov.w	r0, #4294967295
 8005874:	81a3      	strh	r3, [r4, #12]
 8005876:	e03e      	b.n	80058f6 <__swsetup_r+0xba>
 8005878:	4b25      	ldr	r3, [pc, #148]	; (8005910 <__swsetup_r+0xd4>)
 800587a:	429c      	cmp	r4, r3
 800587c:	d101      	bne.n	8005882 <__swsetup_r+0x46>
 800587e:	68ac      	ldr	r4, [r5, #8]
 8005880:	e7eb      	b.n	800585a <__swsetup_r+0x1e>
 8005882:	4b24      	ldr	r3, [pc, #144]	; (8005914 <__swsetup_r+0xd8>)
 8005884:	429c      	cmp	r4, r3
 8005886:	bf08      	it	eq
 8005888:	68ec      	ldreq	r4, [r5, #12]
 800588a:	e7e6      	b.n	800585a <__swsetup_r+0x1e>
 800588c:	0758      	lsls	r0, r3, #29
 800588e:	d512      	bpl.n	80058b6 <__swsetup_r+0x7a>
 8005890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005892:	b141      	cbz	r1, 80058a6 <__swsetup_r+0x6a>
 8005894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005898:	4299      	cmp	r1, r3
 800589a:	d002      	beq.n	80058a2 <__swsetup_r+0x66>
 800589c:	4630      	mov	r0, r6
 800589e:	f000 fa57 	bl	8005d50 <_free_r>
 80058a2:	2300      	movs	r3, #0
 80058a4:	6363      	str	r3, [r4, #52]	; 0x34
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	2300      	movs	r3, #0
 80058b0:	6063      	str	r3, [r4, #4]
 80058b2:	6923      	ldr	r3, [r4, #16]
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	f043 0308 	orr.w	r3, r3, #8
 80058bc:	81a3      	strh	r3, [r4, #12]
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	b94b      	cbnz	r3, 80058d6 <__swsetup_r+0x9a>
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058cc:	d003      	beq.n	80058d6 <__swsetup_r+0x9a>
 80058ce:	4621      	mov	r1, r4
 80058d0:	4630      	mov	r0, r6
 80058d2:	f000 f9fd 	bl	8005cd0 <__smakebuf_r>
 80058d6:	89a0      	ldrh	r0, [r4, #12]
 80058d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058dc:	f010 0301 	ands.w	r3, r0, #1
 80058e0:	d00a      	beq.n	80058f8 <__swsetup_r+0xbc>
 80058e2:	2300      	movs	r3, #0
 80058e4:	60a3      	str	r3, [r4, #8]
 80058e6:	6963      	ldr	r3, [r4, #20]
 80058e8:	425b      	negs	r3, r3
 80058ea:	61a3      	str	r3, [r4, #24]
 80058ec:	6923      	ldr	r3, [r4, #16]
 80058ee:	b943      	cbnz	r3, 8005902 <__swsetup_r+0xc6>
 80058f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058f4:	d1ba      	bne.n	800586c <__swsetup_r+0x30>
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	0781      	lsls	r1, r0, #30
 80058fa:	bf58      	it	pl
 80058fc:	6963      	ldrpl	r3, [r4, #20]
 80058fe:	60a3      	str	r3, [r4, #8]
 8005900:	e7f4      	b.n	80058ec <__swsetup_r+0xb0>
 8005902:	2000      	movs	r0, #0
 8005904:	e7f7      	b.n	80058f6 <__swsetup_r+0xba>
 8005906:	bf00      	nop
 8005908:	2000000c 	.word	0x2000000c
 800590c:	080060fc 	.word	0x080060fc
 8005910:	0800611c 	.word	0x0800611c
 8005914:	080060dc 	.word	0x080060dc

08005918 <__sflush_r>:
 8005918:	898a      	ldrh	r2, [r1, #12]
 800591a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800591e:	4605      	mov	r5, r0
 8005920:	0710      	lsls	r0, r2, #28
 8005922:	460c      	mov	r4, r1
 8005924:	d458      	bmi.n	80059d8 <__sflush_r+0xc0>
 8005926:	684b      	ldr	r3, [r1, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	dc05      	bgt.n	8005938 <__sflush_r+0x20>
 800592c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	dc02      	bgt.n	8005938 <__sflush_r+0x20>
 8005932:	2000      	movs	r0, #0
 8005934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800593a:	2e00      	cmp	r6, #0
 800593c:	d0f9      	beq.n	8005932 <__sflush_r+0x1a>
 800593e:	2300      	movs	r3, #0
 8005940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005944:	682f      	ldr	r7, [r5, #0]
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	d032      	beq.n	80059b0 <__sflush_r+0x98>
 800594a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	075a      	lsls	r2, r3, #29
 8005950:	d505      	bpl.n	800595e <__sflush_r+0x46>
 8005952:	6863      	ldr	r3, [r4, #4]
 8005954:	1ac0      	subs	r0, r0, r3
 8005956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005958:	b10b      	cbz	r3, 800595e <__sflush_r+0x46>
 800595a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800595c:	1ac0      	subs	r0, r0, r3
 800595e:	2300      	movs	r3, #0
 8005960:	4602      	mov	r2, r0
 8005962:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005964:	4628      	mov	r0, r5
 8005966:	6a21      	ldr	r1, [r4, #32]
 8005968:	47b0      	blx	r6
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	d106      	bne.n	800597e <__sflush_r+0x66>
 8005970:	6829      	ldr	r1, [r5, #0]
 8005972:	291d      	cmp	r1, #29
 8005974:	d82c      	bhi.n	80059d0 <__sflush_r+0xb8>
 8005976:	4a29      	ldr	r2, [pc, #164]	; (8005a1c <__sflush_r+0x104>)
 8005978:	40ca      	lsrs	r2, r1
 800597a:	07d6      	lsls	r6, r2, #31
 800597c:	d528      	bpl.n	80059d0 <__sflush_r+0xb8>
 800597e:	2200      	movs	r2, #0
 8005980:	04d9      	lsls	r1, r3, #19
 8005982:	6062      	str	r2, [r4, #4]
 8005984:	6922      	ldr	r2, [r4, #16]
 8005986:	6022      	str	r2, [r4, #0]
 8005988:	d504      	bpl.n	8005994 <__sflush_r+0x7c>
 800598a:	1c42      	adds	r2, r0, #1
 800598c:	d101      	bne.n	8005992 <__sflush_r+0x7a>
 800598e:	682b      	ldr	r3, [r5, #0]
 8005990:	b903      	cbnz	r3, 8005994 <__sflush_r+0x7c>
 8005992:	6560      	str	r0, [r4, #84]	; 0x54
 8005994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005996:	602f      	str	r7, [r5, #0]
 8005998:	2900      	cmp	r1, #0
 800599a:	d0ca      	beq.n	8005932 <__sflush_r+0x1a>
 800599c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059a0:	4299      	cmp	r1, r3
 80059a2:	d002      	beq.n	80059aa <__sflush_r+0x92>
 80059a4:	4628      	mov	r0, r5
 80059a6:	f000 f9d3 	bl	8005d50 <_free_r>
 80059aa:	2000      	movs	r0, #0
 80059ac:	6360      	str	r0, [r4, #52]	; 0x34
 80059ae:	e7c1      	b.n	8005934 <__sflush_r+0x1c>
 80059b0:	6a21      	ldr	r1, [r4, #32]
 80059b2:	2301      	movs	r3, #1
 80059b4:	4628      	mov	r0, r5
 80059b6:	47b0      	blx	r6
 80059b8:	1c41      	adds	r1, r0, #1
 80059ba:	d1c7      	bne.n	800594c <__sflush_r+0x34>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0c4      	beq.n	800594c <__sflush_r+0x34>
 80059c2:	2b1d      	cmp	r3, #29
 80059c4:	d001      	beq.n	80059ca <__sflush_r+0xb2>
 80059c6:	2b16      	cmp	r3, #22
 80059c8:	d101      	bne.n	80059ce <__sflush_r+0xb6>
 80059ca:	602f      	str	r7, [r5, #0]
 80059cc:	e7b1      	b.n	8005932 <__sflush_r+0x1a>
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d4:	81a3      	strh	r3, [r4, #12]
 80059d6:	e7ad      	b.n	8005934 <__sflush_r+0x1c>
 80059d8:	690f      	ldr	r7, [r1, #16]
 80059da:	2f00      	cmp	r7, #0
 80059dc:	d0a9      	beq.n	8005932 <__sflush_r+0x1a>
 80059de:	0793      	lsls	r3, r2, #30
 80059e0:	680e      	ldr	r6, [r1, #0]
 80059e2:	600f      	str	r7, [r1, #0]
 80059e4:	bf0c      	ite	eq
 80059e6:	694b      	ldreq	r3, [r1, #20]
 80059e8:	2300      	movne	r3, #0
 80059ea:	eba6 0807 	sub.w	r8, r6, r7
 80059ee:	608b      	str	r3, [r1, #8]
 80059f0:	f1b8 0f00 	cmp.w	r8, #0
 80059f4:	dd9d      	ble.n	8005932 <__sflush_r+0x1a>
 80059f6:	4643      	mov	r3, r8
 80059f8:	463a      	mov	r2, r7
 80059fa:	6a21      	ldr	r1, [r4, #32]
 80059fc:	4628      	mov	r0, r5
 80059fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a00:	47b0      	blx	r6
 8005a02:	2800      	cmp	r0, #0
 8005a04:	dc06      	bgt.n	8005a14 <__sflush_r+0xfc>
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	e78f      	b.n	8005934 <__sflush_r+0x1c>
 8005a14:	4407      	add	r7, r0
 8005a16:	eba8 0800 	sub.w	r8, r8, r0
 8005a1a:	e7e9      	b.n	80059f0 <__sflush_r+0xd8>
 8005a1c:	20400001 	.word	0x20400001

08005a20 <_fflush_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	690b      	ldr	r3, [r1, #16]
 8005a24:	4605      	mov	r5, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	b913      	cbnz	r3, 8005a30 <_fflush_r+0x10>
 8005a2a:	2500      	movs	r5, #0
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	b118      	cbz	r0, 8005a3a <_fflush_r+0x1a>
 8005a32:	6983      	ldr	r3, [r0, #24]
 8005a34:	b90b      	cbnz	r3, 8005a3a <_fflush_r+0x1a>
 8005a36:	f000 f887 	bl	8005b48 <__sinit>
 8005a3a:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <_fflush_r+0x6c>)
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	d11b      	bne.n	8005a78 <_fflush_r+0x58>
 8005a40:	686c      	ldr	r4, [r5, #4]
 8005a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0ef      	beq.n	8005a2a <_fflush_r+0xa>
 8005a4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a4c:	07d0      	lsls	r0, r2, #31
 8005a4e:	d404      	bmi.n	8005a5a <_fflush_r+0x3a>
 8005a50:	0599      	lsls	r1, r3, #22
 8005a52:	d402      	bmi.n	8005a5a <_fflush_r+0x3a>
 8005a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a56:	f000 f915 	bl	8005c84 <__retarget_lock_acquire_recursive>
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	f7ff ff5b 	bl	8005918 <__sflush_r>
 8005a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a64:	4605      	mov	r5, r0
 8005a66:	07da      	lsls	r2, r3, #31
 8005a68:	d4e0      	bmi.n	8005a2c <_fflush_r+0xc>
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	059b      	lsls	r3, r3, #22
 8005a6e:	d4dd      	bmi.n	8005a2c <_fflush_r+0xc>
 8005a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a72:	f000 f908 	bl	8005c86 <__retarget_lock_release_recursive>
 8005a76:	e7d9      	b.n	8005a2c <_fflush_r+0xc>
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <_fflush_r+0x70>)
 8005a7a:	429c      	cmp	r4, r3
 8005a7c:	d101      	bne.n	8005a82 <_fflush_r+0x62>
 8005a7e:	68ac      	ldr	r4, [r5, #8]
 8005a80:	e7df      	b.n	8005a42 <_fflush_r+0x22>
 8005a82:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <_fflush_r+0x74>)
 8005a84:	429c      	cmp	r4, r3
 8005a86:	bf08      	it	eq
 8005a88:	68ec      	ldreq	r4, [r5, #12]
 8005a8a:	e7da      	b.n	8005a42 <_fflush_r+0x22>
 8005a8c:	080060fc 	.word	0x080060fc
 8005a90:	0800611c 	.word	0x0800611c
 8005a94:	080060dc 	.word	0x080060dc

08005a98 <std>:
 8005a98:	2300      	movs	r3, #0
 8005a9a:	b510      	push	{r4, lr}
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	6083      	str	r3, [r0, #8]
 8005aa0:	8181      	strh	r1, [r0, #12]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6643      	str	r3, [r0, #100]	; 0x64
 8005aa6:	81c2      	strh	r2, [r0, #14]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	6183      	str	r3, [r0, #24]
 8005aac:	e9c0 3300 	strd	r3, r3, [r0]
 8005ab0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ab4:	305c      	adds	r0, #92	; 0x5c
 8005ab6:	f7ff fdf1 	bl	800569c <memset>
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <std+0x38>)
 8005abc:	6224      	str	r4, [r4, #32]
 8005abe:	6263      	str	r3, [r4, #36]	; 0x24
 8005ac0:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <std+0x3c>)
 8005ac2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <std+0x40>)
 8005ac6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ac8:	4b04      	ldr	r3, [pc, #16]	; (8005adc <std+0x44>)
 8005aca:	6323      	str	r3, [r4, #48]	; 0x30
 8005acc:	bd10      	pop	{r4, pc}
 8005ace:	bf00      	nop
 8005ad0:	08005ec5 	.word	0x08005ec5
 8005ad4:	08005ee7 	.word	0x08005ee7
 8005ad8:	08005f1f 	.word	0x08005f1f
 8005adc:	08005f43 	.word	0x08005f43

08005ae0 <_cleanup_r>:
 8005ae0:	4901      	ldr	r1, [pc, #4]	; (8005ae8 <_cleanup_r+0x8>)
 8005ae2:	f000 b8af 	b.w	8005c44 <_fwalk_reent>
 8005ae6:	bf00      	nop
 8005ae8:	08005a21 	.word	0x08005a21

08005aec <__sfmoreglue>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	1e4a      	subs	r2, r1, #1
 8005af0:	2568      	movs	r5, #104	; 0x68
 8005af2:	460e      	mov	r6, r1
 8005af4:	4355      	muls	r5, r2
 8005af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005afa:	f000 f979 	bl	8005df0 <_malloc_r>
 8005afe:	4604      	mov	r4, r0
 8005b00:	b140      	cbz	r0, 8005b14 <__sfmoreglue+0x28>
 8005b02:	2100      	movs	r1, #0
 8005b04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b08:	e9c0 1600 	strd	r1, r6, [r0]
 8005b0c:	300c      	adds	r0, #12
 8005b0e:	60a0      	str	r0, [r4, #8]
 8005b10:	f7ff fdc4 	bl	800569c <memset>
 8005b14:	4620      	mov	r0, r4
 8005b16:	bd70      	pop	{r4, r5, r6, pc}

08005b18 <__sfp_lock_acquire>:
 8005b18:	4801      	ldr	r0, [pc, #4]	; (8005b20 <__sfp_lock_acquire+0x8>)
 8005b1a:	f000 b8b3 	b.w	8005c84 <__retarget_lock_acquire_recursive>
 8005b1e:	bf00      	nop
 8005b20:	200004b8 	.word	0x200004b8

08005b24 <__sfp_lock_release>:
 8005b24:	4801      	ldr	r0, [pc, #4]	; (8005b2c <__sfp_lock_release+0x8>)
 8005b26:	f000 b8ae 	b.w	8005c86 <__retarget_lock_release_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	200004b8 	.word	0x200004b8

08005b30 <__sinit_lock_acquire>:
 8005b30:	4801      	ldr	r0, [pc, #4]	; (8005b38 <__sinit_lock_acquire+0x8>)
 8005b32:	f000 b8a7 	b.w	8005c84 <__retarget_lock_acquire_recursive>
 8005b36:	bf00      	nop
 8005b38:	200004b3 	.word	0x200004b3

08005b3c <__sinit_lock_release>:
 8005b3c:	4801      	ldr	r0, [pc, #4]	; (8005b44 <__sinit_lock_release+0x8>)
 8005b3e:	f000 b8a2 	b.w	8005c86 <__retarget_lock_release_recursive>
 8005b42:	bf00      	nop
 8005b44:	200004b3 	.word	0x200004b3

08005b48 <__sinit>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	f7ff fff0 	bl	8005b30 <__sinit_lock_acquire>
 8005b50:	69a3      	ldr	r3, [r4, #24]
 8005b52:	b11b      	cbz	r3, 8005b5c <__sinit+0x14>
 8005b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b58:	f7ff bff0 	b.w	8005b3c <__sinit_lock_release>
 8005b5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b60:	6523      	str	r3, [r4, #80]	; 0x50
 8005b62:	4620      	mov	r0, r4
 8005b64:	4b12      	ldr	r3, [pc, #72]	; (8005bb0 <__sinit+0x68>)
 8005b66:	4a13      	ldr	r2, [pc, #76]	; (8005bb4 <__sinit+0x6c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	bf04      	itt	eq
 8005b70:	2301      	moveq	r3, #1
 8005b72:	61a3      	streq	r3, [r4, #24]
 8005b74:	f000 f820 	bl	8005bb8 <__sfp>
 8005b78:	6060      	str	r0, [r4, #4]
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f000 f81c 	bl	8005bb8 <__sfp>
 8005b80:	60a0      	str	r0, [r4, #8]
 8005b82:	4620      	mov	r0, r4
 8005b84:	f000 f818 	bl	8005bb8 <__sfp>
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2104      	movs	r1, #4
 8005b8c:	60e0      	str	r0, [r4, #12]
 8005b8e:	6860      	ldr	r0, [r4, #4]
 8005b90:	f7ff ff82 	bl	8005a98 <std>
 8005b94:	2201      	movs	r2, #1
 8005b96:	2109      	movs	r1, #9
 8005b98:	68a0      	ldr	r0, [r4, #8]
 8005b9a:	f7ff ff7d 	bl	8005a98 <std>
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	2112      	movs	r1, #18
 8005ba2:	68e0      	ldr	r0, [r4, #12]
 8005ba4:	f7ff ff78 	bl	8005a98 <std>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	61a3      	str	r3, [r4, #24]
 8005bac:	e7d2      	b.n	8005b54 <__sinit+0xc>
 8005bae:	bf00      	nop
 8005bb0:	080060d8 	.word	0x080060d8
 8005bb4:	08005ae1 	.word	0x08005ae1

08005bb8 <__sfp>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	4607      	mov	r7, r0
 8005bbc:	f7ff ffac 	bl	8005b18 <__sfp_lock_acquire>
 8005bc0:	4b1e      	ldr	r3, [pc, #120]	; (8005c3c <__sfp+0x84>)
 8005bc2:	681e      	ldr	r6, [r3, #0]
 8005bc4:	69b3      	ldr	r3, [r6, #24]
 8005bc6:	b913      	cbnz	r3, 8005bce <__sfp+0x16>
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f7ff ffbd 	bl	8005b48 <__sinit>
 8005bce:	3648      	adds	r6, #72	; 0x48
 8005bd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	d503      	bpl.n	8005be0 <__sfp+0x28>
 8005bd8:	6833      	ldr	r3, [r6, #0]
 8005bda:	b30b      	cbz	r3, 8005c20 <__sfp+0x68>
 8005bdc:	6836      	ldr	r6, [r6, #0]
 8005bde:	e7f7      	b.n	8005bd0 <__sfp+0x18>
 8005be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005be4:	b9d5      	cbnz	r5, 8005c1c <__sfp+0x64>
 8005be6:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <__sfp+0x88>)
 8005be8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bec:	6665      	str	r5, [r4, #100]	; 0x64
 8005bee:	60e3      	str	r3, [r4, #12]
 8005bf0:	f000 f847 	bl	8005c82 <__retarget_lock_init_recursive>
 8005bf4:	f7ff ff96 	bl	8005b24 <__sfp_lock_release>
 8005bf8:	2208      	movs	r2, #8
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c00:	6025      	str	r5, [r4, #0]
 8005c02:	61a5      	str	r5, [r4, #24]
 8005c04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c0c:	f7ff fd46 	bl	800569c <memset>
 8005c10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c18:	4620      	mov	r0, r4
 8005c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c1c:	3468      	adds	r4, #104	; 0x68
 8005c1e:	e7d9      	b.n	8005bd4 <__sfp+0x1c>
 8005c20:	2104      	movs	r1, #4
 8005c22:	4638      	mov	r0, r7
 8005c24:	f7ff ff62 	bl	8005aec <__sfmoreglue>
 8005c28:	4604      	mov	r4, r0
 8005c2a:	6030      	str	r0, [r6, #0]
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d1d5      	bne.n	8005bdc <__sfp+0x24>
 8005c30:	f7ff ff78 	bl	8005b24 <__sfp_lock_release>
 8005c34:	230c      	movs	r3, #12
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	e7ee      	b.n	8005c18 <__sfp+0x60>
 8005c3a:	bf00      	nop
 8005c3c:	080060d8 	.word	0x080060d8
 8005c40:	ffff0001 	.word	0xffff0001

08005c44 <_fwalk_reent>:
 8005c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c48:	4606      	mov	r6, r0
 8005c4a:	4688      	mov	r8, r1
 8005c4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c50:	2700      	movs	r7, #0
 8005c52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c56:	f1b9 0901 	subs.w	r9, r9, #1
 8005c5a:	d505      	bpl.n	8005c68 <_fwalk_reent+0x24>
 8005c5c:	6824      	ldr	r4, [r4, #0]
 8005c5e:	2c00      	cmp	r4, #0
 8005c60:	d1f7      	bne.n	8005c52 <_fwalk_reent+0xe>
 8005c62:	4638      	mov	r0, r7
 8005c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c68:	89ab      	ldrh	r3, [r5, #12]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d907      	bls.n	8005c7e <_fwalk_reent+0x3a>
 8005c6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c72:	3301      	adds	r3, #1
 8005c74:	d003      	beq.n	8005c7e <_fwalk_reent+0x3a>
 8005c76:	4629      	mov	r1, r5
 8005c78:	4630      	mov	r0, r6
 8005c7a:	47c0      	blx	r8
 8005c7c:	4307      	orrs	r7, r0
 8005c7e:	3568      	adds	r5, #104	; 0x68
 8005c80:	e7e9      	b.n	8005c56 <_fwalk_reent+0x12>

08005c82 <__retarget_lock_init_recursive>:
 8005c82:	4770      	bx	lr

08005c84 <__retarget_lock_acquire_recursive>:
 8005c84:	4770      	bx	lr

08005c86 <__retarget_lock_release_recursive>:
 8005c86:	4770      	bx	lr

08005c88 <__swhatbuf_r>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	460e      	mov	r6, r1
 8005c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c90:	b096      	sub	sp, #88	; 0x58
 8005c92:	4614      	mov	r4, r2
 8005c94:	2900      	cmp	r1, #0
 8005c96:	461d      	mov	r5, r3
 8005c98:	da07      	bge.n	8005caa <__swhatbuf_r+0x22>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	602b      	str	r3, [r5, #0]
 8005c9e:	89b3      	ldrh	r3, [r6, #12]
 8005ca0:	061a      	lsls	r2, r3, #24
 8005ca2:	d410      	bmi.n	8005cc6 <__swhatbuf_r+0x3e>
 8005ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca8:	e00e      	b.n	8005cc8 <__swhatbuf_r+0x40>
 8005caa:	466a      	mov	r2, sp
 8005cac:	f000 f970 	bl	8005f90 <_fstat_r>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	dbf2      	blt.n	8005c9a <__swhatbuf_r+0x12>
 8005cb4:	9a01      	ldr	r2, [sp, #4]
 8005cb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cbe:	425a      	negs	r2, r3
 8005cc0:	415a      	adcs	r2, r3
 8005cc2:	602a      	str	r2, [r5, #0]
 8005cc4:	e7ee      	b.n	8005ca4 <__swhatbuf_r+0x1c>
 8005cc6:	2340      	movs	r3, #64	; 0x40
 8005cc8:	2000      	movs	r0, #0
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	b016      	add	sp, #88	; 0x58
 8005cce:	bd70      	pop	{r4, r5, r6, pc}

08005cd0 <__smakebuf_r>:
 8005cd0:	898b      	ldrh	r3, [r1, #12]
 8005cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cd4:	079d      	lsls	r5, r3, #30
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	460c      	mov	r4, r1
 8005cda:	d507      	bpl.n	8005cec <__smakebuf_r+0x1c>
 8005cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	6123      	str	r3, [r4, #16]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	6163      	str	r3, [r4, #20]
 8005ce8:	b002      	add	sp, #8
 8005cea:	bd70      	pop	{r4, r5, r6, pc}
 8005cec:	ab01      	add	r3, sp, #4
 8005cee:	466a      	mov	r2, sp
 8005cf0:	f7ff ffca 	bl	8005c88 <__swhatbuf_r>
 8005cf4:	9900      	ldr	r1, [sp, #0]
 8005cf6:	4605      	mov	r5, r0
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	f000 f879 	bl	8005df0 <_malloc_r>
 8005cfe:	b948      	cbnz	r0, 8005d14 <__smakebuf_r+0x44>
 8005d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d04:	059a      	lsls	r2, r3, #22
 8005d06:	d4ef      	bmi.n	8005ce8 <__smakebuf_r+0x18>
 8005d08:	f023 0303 	bic.w	r3, r3, #3
 8005d0c:	f043 0302 	orr.w	r3, r3, #2
 8005d10:	81a3      	strh	r3, [r4, #12]
 8005d12:	e7e3      	b.n	8005cdc <__smakebuf_r+0xc>
 8005d14:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <__smakebuf_r+0x7c>)
 8005d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	6020      	str	r0, [r4, #0]
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d20:	6120      	str	r0, [r4, #16]
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	9b00      	ldr	r3, [sp, #0]
 8005d26:	6163      	str	r3, [r4, #20]
 8005d28:	9b01      	ldr	r3, [sp, #4]
 8005d2a:	b15b      	cbz	r3, 8005d44 <__smakebuf_r+0x74>
 8005d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d30:	4630      	mov	r0, r6
 8005d32:	f000 f93f 	bl	8005fb4 <_isatty_r>
 8005d36:	b128      	cbz	r0, 8005d44 <__smakebuf_r+0x74>
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	81a3      	strh	r3, [r4, #12]
 8005d44:	89a0      	ldrh	r0, [r4, #12]
 8005d46:	4305      	orrs	r5, r0
 8005d48:	81a5      	strh	r5, [r4, #12]
 8005d4a:	e7cd      	b.n	8005ce8 <__smakebuf_r+0x18>
 8005d4c:	08005ae1 	.word	0x08005ae1

08005d50 <_free_r>:
 8005d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d52:	2900      	cmp	r1, #0
 8005d54:	d047      	beq.n	8005de6 <_free_r+0x96>
 8005d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d5a:	1f0c      	subs	r4, r1, #4
 8005d5c:	9001      	str	r0, [sp, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bfb8      	it	lt
 8005d62:	18e4      	addlt	r4, r4, r3
 8005d64:	f000 f948 	bl	8005ff8 <__malloc_lock>
 8005d68:	4a20      	ldr	r2, [pc, #128]	; (8005dec <_free_r+0x9c>)
 8005d6a:	9801      	ldr	r0, [sp, #4]
 8005d6c:	6813      	ldr	r3, [r2, #0]
 8005d6e:	4615      	mov	r5, r2
 8005d70:	b933      	cbnz	r3, 8005d80 <_free_r+0x30>
 8005d72:	6063      	str	r3, [r4, #4]
 8005d74:	6014      	str	r4, [r2, #0]
 8005d76:	b003      	add	sp, #12
 8005d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d7c:	f000 b942 	b.w	8006004 <__malloc_unlock>
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	d90b      	bls.n	8005d9c <_free_r+0x4c>
 8005d84:	6821      	ldr	r1, [r4, #0]
 8005d86:	1862      	adds	r2, r4, r1
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	bf02      	ittt	eq
 8005d8c:	681a      	ldreq	r2, [r3, #0]
 8005d8e:	685b      	ldreq	r3, [r3, #4]
 8005d90:	1852      	addeq	r2, r2, r1
 8005d92:	6063      	str	r3, [r4, #4]
 8005d94:	bf08      	it	eq
 8005d96:	6022      	streq	r2, [r4, #0]
 8005d98:	602c      	str	r4, [r5, #0]
 8005d9a:	e7ec      	b.n	8005d76 <_free_r+0x26>
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	b10b      	cbz	r3, 8005da6 <_free_r+0x56>
 8005da2:	42a3      	cmp	r3, r4
 8005da4:	d9fa      	bls.n	8005d9c <_free_r+0x4c>
 8005da6:	6811      	ldr	r1, [r2, #0]
 8005da8:	1855      	adds	r5, r2, r1
 8005daa:	42a5      	cmp	r5, r4
 8005dac:	d10b      	bne.n	8005dc6 <_free_r+0x76>
 8005dae:	6824      	ldr	r4, [r4, #0]
 8005db0:	4421      	add	r1, r4
 8005db2:	1854      	adds	r4, r2, r1
 8005db4:	6011      	str	r1, [r2, #0]
 8005db6:	42a3      	cmp	r3, r4
 8005db8:	d1dd      	bne.n	8005d76 <_free_r+0x26>
 8005dba:	681c      	ldr	r4, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	4421      	add	r1, r4
 8005dc0:	6053      	str	r3, [r2, #4]
 8005dc2:	6011      	str	r1, [r2, #0]
 8005dc4:	e7d7      	b.n	8005d76 <_free_r+0x26>
 8005dc6:	d902      	bls.n	8005dce <_free_r+0x7e>
 8005dc8:	230c      	movs	r3, #12
 8005dca:	6003      	str	r3, [r0, #0]
 8005dcc:	e7d3      	b.n	8005d76 <_free_r+0x26>
 8005dce:	6825      	ldr	r5, [r4, #0]
 8005dd0:	1961      	adds	r1, r4, r5
 8005dd2:	428b      	cmp	r3, r1
 8005dd4:	bf02      	ittt	eq
 8005dd6:	6819      	ldreq	r1, [r3, #0]
 8005dd8:	685b      	ldreq	r3, [r3, #4]
 8005dda:	1949      	addeq	r1, r1, r5
 8005ddc:	6063      	str	r3, [r4, #4]
 8005dde:	bf08      	it	eq
 8005de0:	6021      	streq	r1, [r4, #0]
 8005de2:	6054      	str	r4, [r2, #4]
 8005de4:	e7c7      	b.n	8005d76 <_free_r+0x26>
 8005de6:	b003      	add	sp, #12
 8005de8:	bd30      	pop	{r4, r5, pc}
 8005dea:	bf00      	nop
 8005dec:	20000090 	.word	0x20000090

08005df0 <_malloc_r>:
 8005df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df2:	1ccd      	adds	r5, r1, #3
 8005df4:	4606      	mov	r6, r0
 8005df6:	f025 0503 	bic.w	r5, r5, #3
 8005dfa:	3508      	adds	r5, #8
 8005dfc:	2d0c      	cmp	r5, #12
 8005dfe:	bf38      	it	cc
 8005e00:	250c      	movcc	r5, #12
 8005e02:	2d00      	cmp	r5, #0
 8005e04:	db01      	blt.n	8005e0a <_malloc_r+0x1a>
 8005e06:	42a9      	cmp	r1, r5
 8005e08:	d903      	bls.n	8005e12 <_malloc_r+0x22>
 8005e0a:	230c      	movs	r3, #12
 8005e0c:	6033      	str	r3, [r6, #0]
 8005e0e:	2000      	movs	r0, #0
 8005e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e12:	f000 f8f1 	bl	8005ff8 <__malloc_lock>
 8005e16:	4921      	ldr	r1, [pc, #132]	; (8005e9c <_malloc_r+0xac>)
 8005e18:	680a      	ldr	r2, [r1, #0]
 8005e1a:	4614      	mov	r4, r2
 8005e1c:	b99c      	cbnz	r4, 8005e46 <_malloc_r+0x56>
 8005e1e:	4f20      	ldr	r7, [pc, #128]	; (8005ea0 <_malloc_r+0xb0>)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	b923      	cbnz	r3, 8005e2e <_malloc_r+0x3e>
 8005e24:	4621      	mov	r1, r4
 8005e26:	4630      	mov	r0, r6
 8005e28:	f000 f83c 	bl	8005ea4 <_sbrk_r>
 8005e2c:	6038      	str	r0, [r7, #0]
 8005e2e:	4629      	mov	r1, r5
 8005e30:	4630      	mov	r0, r6
 8005e32:	f000 f837 	bl	8005ea4 <_sbrk_r>
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	d123      	bne.n	8005e82 <_malloc_r+0x92>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	6033      	str	r3, [r6, #0]
 8005e40:	f000 f8e0 	bl	8006004 <__malloc_unlock>
 8005e44:	e7e3      	b.n	8005e0e <_malloc_r+0x1e>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	1b5b      	subs	r3, r3, r5
 8005e4a:	d417      	bmi.n	8005e7c <_malloc_r+0x8c>
 8005e4c:	2b0b      	cmp	r3, #11
 8005e4e:	d903      	bls.n	8005e58 <_malloc_r+0x68>
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	441c      	add	r4, r3
 8005e54:	6025      	str	r5, [r4, #0]
 8005e56:	e004      	b.n	8005e62 <_malloc_r+0x72>
 8005e58:	6863      	ldr	r3, [r4, #4]
 8005e5a:	42a2      	cmp	r2, r4
 8005e5c:	bf0c      	ite	eq
 8005e5e:	600b      	streq	r3, [r1, #0]
 8005e60:	6053      	strne	r3, [r2, #4]
 8005e62:	4630      	mov	r0, r6
 8005e64:	f000 f8ce 	bl	8006004 <__malloc_unlock>
 8005e68:	f104 000b 	add.w	r0, r4, #11
 8005e6c:	1d23      	adds	r3, r4, #4
 8005e6e:	f020 0007 	bic.w	r0, r0, #7
 8005e72:	1ac2      	subs	r2, r0, r3
 8005e74:	d0cc      	beq.n	8005e10 <_malloc_r+0x20>
 8005e76:	1a1b      	subs	r3, r3, r0
 8005e78:	50a3      	str	r3, [r4, r2]
 8005e7a:	e7c9      	b.n	8005e10 <_malloc_r+0x20>
 8005e7c:	4622      	mov	r2, r4
 8005e7e:	6864      	ldr	r4, [r4, #4]
 8005e80:	e7cc      	b.n	8005e1c <_malloc_r+0x2c>
 8005e82:	1cc4      	adds	r4, r0, #3
 8005e84:	f024 0403 	bic.w	r4, r4, #3
 8005e88:	42a0      	cmp	r0, r4
 8005e8a:	d0e3      	beq.n	8005e54 <_malloc_r+0x64>
 8005e8c:	1a21      	subs	r1, r4, r0
 8005e8e:	4630      	mov	r0, r6
 8005e90:	f000 f808 	bl	8005ea4 <_sbrk_r>
 8005e94:	3001      	adds	r0, #1
 8005e96:	d1dd      	bne.n	8005e54 <_malloc_r+0x64>
 8005e98:	e7cf      	b.n	8005e3a <_malloc_r+0x4a>
 8005e9a:	bf00      	nop
 8005e9c:	20000090 	.word	0x20000090
 8005ea0:	20000094 	.word	0x20000094

08005ea4 <_sbrk_r>:
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	4d05      	ldr	r5, [pc, #20]	; (8005ec0 <_sbrk_r+0x1c>)
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4608      	mov	r0, r1
 8005eae:	602b      	str	r3, [r5, #0]
 8005eb0:	f7fa fe72 	bl	8000b98 <_sbrk>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	d102      	bne.n	8005ebe <_sbrk_r+0x1a>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	b103      	cbz	r3, 8005ebe <_sbrk_r+0x1a>
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	200004bc 	.word	0x200004bc

08005ec4 <__sread>:
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ecc:	f000 f8a0 	bl	8006010 <_read_r>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	bfab      	itete	ge
 8005ed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ed8:	181b      	addge	r3, r3, r0
 8005eda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ede:	bfac      	ite	ge
 8005ee0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ee2:	81a3      	strhlt	r3, [r4, #12]
 8005ee4:	bd10      	pop	{r4, pc}

08005ee6 <__swrite>:
 8005ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eea:	461f      	mov	r7, r3
 8005eec:	898b      	ldrh	r3, [r1, #12]
 8005eee:	4605      	mov	r5, r0
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	05db      	lsls	r3, r3, #23
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	d505      	bpl.n	8005f04 <__swrite+0x1e>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	2200      	movs	r2, #0
 8005efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f00:	f000 f868 	bl	8005fd4 <_lseek_r>
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	4632      	mov	r2, r6
 8005f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f12:	81a3      	strh	r3, [r4, #12]
 8005f14:	463b      	mov	r3, r7
 8005f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1a:	f000 b817 	b.w	8005f4c <_write_r>

08005f1e <__sseek>:
 8005f1e:	b510      	push	{r4, lr}
 8005f20:	460c      	mov	r4, r1
 8005f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f26:	f000 f855 	bl	8005fd4 <_lseek_r>
 8005f2a:	1c43      	adds	r3, r0, #1
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	bf15      	itete	ne
 8005f30:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f3a:	81a3      	strheq	r3, [r4, #12]
 8005f3c:	bf18      	it	ne
 8005f3e:	81a3      	strhne	r3, [r4, #12]
 8005f40:	bd10      	pop	{r4, pc}

08005f42 <__sclose>:
 8005f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f46:	f000 b813 	b.w	8005f70 <_close_r>
	...

08005f4c <_write_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4d06      	ldr	r5, [pc, #24]	; (8005f6c <_write_r+0x20>)
 8005f52:	4608      	mov	r0, r1
 8005f54:	4611      	mov	r1, r2
 8005f56:	2200      	movs	r2, #0
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7fa fcda 	bl	8000914 <_write>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_write_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_write_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	200004bc 	.word	0x200004bc

08005f70 <_close_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	2300      	movs	r3, #0
 8005f74:	4d05      	ldr	r5, [pc, #20]	; (8005f8c <_close_r+0x1c>)
 8005f76:	4604      	mov	r4, r0
 8005f78:	4608      	mov	r0, r1
 8005f7a:	602b      	str	r3, [r5, #0]
 8005f7c:	f7fa fdd7 	bl	8000b2e <_close>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	d102      	bne.n	8005f8a <_close_r+0x1a>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	b103      	cbz	r3, 8005f8a <_close_r+0x1a>
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
 8005f8c:	200004bc 	.word	0x200004bc

08005f90 <_fstat_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	2300      	movs	r3, #0
 8005f94:	4d06      	ldr	r5, [pc, #24]	; (8005fb0 <_fstat_r+0x20>)
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	602b      	str	r3, [r5, #0]
 8005f9e:	f7fa fdd2 	bl	8000b46 <_fstat>
 8005fa2:	1c43      	adds	r3, r0, #1
 8005fa4:	d102      	bne.n	8005fac <_fstat_r+0x1c>
 8005fa6:	682b      	ldr	r3, [r5, #0]
 8005fa8:	b103      	cbz	r3, 8005fac <_fstat_r+0x1c>
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	bd38      	pop	{r3, r4, r5, pc}
 8005fae:	bf00      	nop
 8005fb0:	200004bc 	.word	0x200004bc

08005fb4 <_isatty_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	4d05      	ldr	r5, [pc, #20]	; (8005fd0 <_isatty_r+0x1c>)
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	f7fa fdd1 	bl	8000b66 <_isatty>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_isatty_r+0x1a>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_isatty_r+0x1a>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	200004bc 	.word	0x200004bc

08005fd4 <_lseek_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4d06      	ldr	r5, [pc, #24]	; (8005ff4 <_lseek_r+0x20>)
 8005fda:	4608      	mov	r0, r1
 8005fdc:	4611      	mov	r1, r2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	602a      	str	r2, [r5, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f7fa fdca 	bl	8000b7c <_lseek>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_lseek_r+0x1e>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_lseek_r+0x1e>
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	200004bc 	.word	0x200004bc

08005ff8 <__malloc_lock>:
 8005ff8:	4801      	ldr	r0, [pc, #4]	; (8006000 <__malloc_lock+0x8>)
 8005ffa:	f7ff be43 	b.w	8005c84 <__retarget_lock_acquire_recursive>
 8005ffe:	bf00      	nop
 8006000:	200004b4 	.word	0x200004b4

08006004 <__malloc_unlock>:
 8006004:	4801      	ldr	r0, [pc, #4]	; (800600c <__malloc_unlock+0x8>)
 8006006:	f7ff be3e 	b.w	8005c86 <__retarget_lock_release_recursive>
 800600a:	bf00      	nop
 800600c:	200004b4 	.word	0x200004b4

08006010 <_read_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4604      	mov	r4, r0
 8006014:	4d06      	ldr	r5, [pc, #24]	; (8006030 <_read_r+0x20>)
 8006016:	4608      	mov	r0, r1
 8006018:	4611      	mov	r1, r2
 800601a:	2200      	movs	r2, #0
 800601c:	602a      	str	r2, [r5, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	f7fa fd68 	bl	8000af4 <_read>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_read_r+0x1e>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_read_r+0x1e>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	200004bc 	.word	0x200004bc

08006034 <_init>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	bf00      	nop
 8006038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603a:	bc08      	pop	{r3}
 800603c:	469e      	mov	lr, r3
 800603e:	4770      	bx	lr

08006040 <_fini>:
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	bf00      	nop
 8006044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006046:	bc08      	pop	{r3}
 8006048:	469e      	mov	lr, r3
 800604a:	4770      	bx	lr
